import logging
from ta_conf import server_conf
from ta_conf import task_conf
from ta_conf import template_conf
from ta_conf import global_conf


_LOGGER = logging.getLogger("ta_app_conf")


class TAConfTask(object):
    """
    Responsibilities:
    1) Monitor confs which are generated by Web
    2) Generate tasks
    """

    def __init__(self, meta_configs, server_file, template_file,
                 task_file, global_file):
        """
        @meta_configs: dict contains Splunk server_uri, checkpoint_dir and
                       session_key
        """

        self.metas = meta_configs
        self.server_file = server_file
        self.template_file = template_file
        self.task_file = task_file
        self.global_file = global_file

    def encrypt_credentials(self):
        conf_mgr = server_conf.ServerConfManager(self.server_file,
                                                 self.metas["server_uri"],
                                                 self.metas["session_key"])
        servers = conf_mgr.all(self.metas["app_name"], decrypt=False)
        for server in servers:
            if conf_mgr._needs_encrypt(server.to_dict()):
                _LOGGER.info("Encrypt clear username password for server=%s",
                             server.server_url)
                res = conf_mgr.update(server)
                if res is None:
                    raise Exception("Failed to encrypt clear uername password "
                                    "for server=%s", server.server_url)

    def get_tasks(self):
        mgr_clses = ((server_conf.ServerConfManager, self.server_file),
                     (template_conf.TemplateConfManager, self.template_file),
                     (task_conf.TaskConfManager, self.task_file),
                     (global_conf.GlobalSettingsConfManager, self.global_file))

        conf_objs = []
        for mgr_cls, file_name in mgr_clses:
            conf_objs.append(self._get_conf_objects(mgr_cls, file_name))

        all_task_configs = []
        for _, task in conf_objs[2].iteritems():
            task_configs = self._get_server_and_task_template_info_for_task(
                task, conf_objs[0], conf_objs[1])
            all_task_configs.extend(task_configs)

        log_level = "INFO"
        for k, v in conf_objs[-1].iteritems():
            if "log_level" in v:
                log_level = v["log_level"]
                break

        for task_config in all_task_configs:
            task_config["log_level"] = log_level

        return all_task_configs

    def _extract(self, x):
        for item in x.split("|"):
            for y in item.split(","):
                y = y.strip()
                if ":" not in y:
                    y = self.metas["app_name"] + ":" + y
                yield y

    @staticmethod
    def _create_task_config(task, task_template, remote_server):
        """
        interval in task overrides interval in remote_server
        """

        template_name = task_template["appName"] + ":" + task_template["name"]
        task_config = {"task_template": template_name}
        task_config.update(task_template)
        task_config.update(remote_server)
        task_config.update(task)

        required_keys = ("account_name", "account_password", "server_url",
                         "content", "index", "interval", "disabled")
        msg = "Required key={} not in found"
        for k in required_keys:
            if k not in task_config:
                _LOGGER.error(msg.format(k))
                raise Exception(msg.format(k))
        return task_config

    def _get_task_templates_for_task(self, task, task_templates):
        templates = {}
        ns_templates = self._extract(task["templates"])
        for temp_name in ns_templates:
            if temp_name in task_templates:
                templates[temp_name] = task_templates[temp_name]
            else:
                msg = ("{0} task template referenced in tasks conf, but not "
                       "defined or disabled in templates conf").format(
                           temp_name)
                _LOGGER.error(msg)

        if not templates:
            msg = "No valid task templates found for task {0}".format(
                task["name"])
            _LOGGER.error(msg)

        return templates

    def _get_task_template_info_for_task(self, task, server_stanza,
                                         remote_server, task_templates):
        task_configs = []
        templates = self._get_task_templates_for_task(
            task, task_templates)
        for name, template in templates.iteritems():
            task_config = TAConfTask._create_task_config(
                task, template, remote_server)
            task_configs.append(task_config)
        return task_configs

    def _get_server_and_task_template_info_for_task(self, task, remote_servers,
                                                    task_templates):
        task_configs = []
        ns_servers = self._extract(task["servers"])
        for server_stanza in ns_servers:
            if server_stanza in remote_servers:
                remote_server = remote_servers[server_stanza]
                configs = self._get_task_template_info_for_task(
                    task, server_stanza, remote_server, task_templates)
                task_configs.extend(configs)
            else:
                msg = ("{} server is referenced by tasks.conf, but it is "
                       "disabled or disabled in servers.conf.").format(
                           server_stanza)
                _LOGGER.error(msg)
        return task_configs

    def _get_conf_objects(self, ConfCls, file_name):
        mgr = ConfCls(
            file_name, self.metas["server_uri"], self.metas["session_key"])
        app_objs = mgr.all(filter_disabled=True)
        return {obj.appName.strip() + ":" + obj.name.strip():
                obj.to_dict() for obj in app_objs}
