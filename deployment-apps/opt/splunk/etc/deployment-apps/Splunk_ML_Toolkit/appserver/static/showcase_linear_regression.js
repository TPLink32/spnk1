webpackJsonp([13],[function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__.p=function(){function make_url(){for(var seg,len,output="",i=0,l=arguments.length;i<l;i++)seg=arguments[i].toString(),len=seg.length,len>1&&"/"==seg.charAt(len-1)&&(seg=seg.substring(0,len-1)),output+="/"!=seg.charAt(0)?"/"+seg:seg;if("/"!=output){var segments=output.split("/"),firstseg=segments[1];if("static"==firstseg||"modules"==firstseg){var postfix=output.substring(firstseg.length+2,output.length);output="/"+firstseg+"/@"+window.$C.BUILD_NUMBER,window.$C.BUILD_PUSH_NUMBER&&(output+="."+window.$C.BUILD_PUSH_NUMBER),"app"==segments[2]&&(output+=":"+getConfigValue("APP_BUILD",0)),output+="/"+postfix}}var root=getConfigValue("MRSPARKLE_ROOT_PATH","/"),djangoRoot=getConfigValue("DJANGO_ROOT_PATH",""),locale=getConfigValue("LOCALE","en-US"),combinedPath="";return combinedPath=djangoRoot&&output.substring(0,djangoRoot.length)===djangoRoot?output.replace(djangoRoot,djangoRoot+"/"+locale.toLowerCase()):"/"+locale+output,""==root||"/"==root?combinedPath:root+combinedPath}function getConfigValue(key,defaultValue){if(window.$C&&window.$C.hasOwnProperty(key))return window.$C[key];if(void 0!==defaultValue)return defaultValue;throw new Error("getConfigValue - "+key+" not set, no default provided")}return make_url("/static/app/Splunk_ML_Toolkit/")+"/"}(),__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__("shim/jquery"),__webpack_require__(48),__webpack_require__("splunkjs/mvc/checkboxview"),__webpack_require__("splunkjs/mvc/dropdownview"),__webpack_require__("splunkjs/mvc/radiogroupview"),__webpack_require__("splunkjs/mvc/singleview"),__webpack_require__(229),__webpack_require__("splunkjs/mvc/utils"),__webpack_require__("splunkjs/mvc/visualizationregistry"),__webpack_require__(233),__webpack_require__(230),__webpack_require__(234),__webpack_require__(236),__webpack_require__(240),__webpack_require__(283),__webpack_require__(231),__webpack_require__(242),__webpack_require__(284),__webpack_require__(44),__webpack_require__(265),__webpack_require__(243),__webpack_require__(266),__webpack_require__(246),__webpack_require__(290),__webpack_require__(286),__webpack_require__(249),__webpack_require__(261),__webpack_require__(235),__webpack_require__(239),__webpack_require__(251)],__WEBPACK_AMD_DEFINE_RESULT__=function(_jquery,_underscoreMltk,_checkboxview,_dropdownview,_radiogroupview,_singleview,_tableview,_utils,_visualizationregistry,_Footer,_Master,_DrilldownLinker,_QueryHistoryTable,_SearchStringDisplay,_Slider,_Spinners,_compactTemplateString,_getFieldFromData,_Options,_ParseAlgorithmParameters,_ShowcaseHistorySerializer,_ControlValidityStore,_NumberValidator,_NumericValueAlertModal,_Master3,_EnhancedMultiDropdownView,_EnhancedTextInputView,_Forms,_Searches,_BaseAssistantView){"use strict";function _interopRequireWildcard(obj){if(obj&&obj.__esModule)return obj;var newObj={};if(null!=obj)for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&(newObj[key]=obj[key]);return newObj["default"]=obj,newObj}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _taggedTemplateLiteral(strings,raw){return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var _jquery2=_interopRequireDefault(_jquery),_underscoreMltk2=_interopRequireDefault(_underscoreMltk),_checkboxview2=_interopRequireDefault(_checkboxview),_dropdownview2=_interopRequireDefault(_dropdownview),_radiogroupview2=_interopRequireDefault(_radiogroupview),_singleview2=_interopRequireDefault(_singleview),_tableview2=_interopRequireDefault(_tableview),_utils2=_interopRequireDefault(_utils),_visualizationregistry2=_interopRequireDefault(_visualizationregistry),_Footer2=_interopRequireDefault(_Footer),_Master2=_interopRequireDefault(_Master),DrilldownLinker=_interopRequireWildcard(_DrilldownLinker),_QueryHistoryTable2=_interopRequireDefault(_QueryHistoryTable),_Slider2=_interopRequireDefault(_Slider),Spinners=_interopRequireWildcard(_Spinners),_compactTemplateString2=_interopRequireDefault(_compactTemplateString),_getFieldFromData2=_interopRequireDefault(_getFieldFromData),_Options2=_interopRequireDefault(_Options),_ParseAlgorithmParameters2=_interopRequireDefault(_ParseAlgorithmParameters),_ShowcaseHistorySerializer2=_interopRequireDefault(_ShowcaseHistorySerializer),_ControlValidityStore2=_interopRequireDefault(_ControlValidityStore),NumberValidator=_interopRequireWildcard(_NumberValidator),_NumericValueAlertModal2=_interopRequireDefault(_NumericValueAlertModal),_Master4=_interopRequireDefault(_Master3),_EnhancedMultiDropdownView2=_interopRequireDefault(_EnhancedMultiDropdownView),_EnhancedTextInputView2=_interopRequireDefault(_EnhancedTextInputView),Forms=_interopRequireWildcard(_Forms),Searches=_interopRequireWildcard(_Searches),_BaseAssistantView2=_interopRequireDefault(_BaseAssistantView),_templateObject=_taggedTemplateLiteral(["| kvstorelookup ",'\n                               | eval Actions=model_name\n                               | eval test_fraction = 100-training_fraction,\n                                      "Split for training / test" = if(test_fraction > 0, training_fraction + " / " + test_fraction, "no split"),\n                                      "Algorithm" = if(regression_algorithm == "" OR isnull(regression_algorithm), "','", regression_algorithm),\n                                      "Algorithm Settings" = regression_algorithm_params,\n                                      "Fields to use for predicting" = features,\n                                      "Model name" = model_name,\n                                      "Search query" = search_query,\n                                      "Preprocess Settings" = preprocess_query,\n                                      "Field to predict" = target,\n                                      "R² Statistic" = round(r_squared, 4),\n                                      "RMSE" = round(rmse, 2)'],["| kvstorelookup ",'\n                               | eval Actions=model_name\n                               | eval test_fraction = 100-training_fraction,\n                                      "Split for training / test" = if(test_fraction > 0, training_fraction + " / " + test_fraction, "no split"),\n                                      "Algorithm" = if(regression_algorithm == "" OR isnull(regression_algorithm), "','", regression_algorithm),\n                                      "Algorithm Settings" = regression_algorithm_params,\n                                      "Fields to use for predicting" = features,\n                                      "Model name" = model_name,\n                                      "Search query" = search_query,\n                                      "Preprocess Settings" = preprocess_query,\n                                      "Field to predict" = target,\n                                      "R² Statistic" = round(r_squared, 4),\n                                      "RMSE" = round(rmse, 2)']),_templateObject2=_taggedTemplateLiteral(["","\n                                                  | search ","=",""],["","\n                                                  | search ","=",""]),_templateObject3=_taggedTemplateLiteral(["","\n                                                  | search ",'="*"'],["","\n                                                  | search ",'="*"']),_templateObject4=_taggedTemplateLiteral(["","\n                                                  | eval residual = '$regressionTargetToken$' - '$regressionPredictionToken$'\n                                                  | search ","=",""],["","\n                                                  | eval residual = '$regressionTargetToken$' - '$regressionPredictionToken$'\n                                                  | search ","=",""]),_templateObject5=_taggedTemplateLiteral(["","\n                                                  | eval residual = '$regressionTargetToken$' - '$regressionPredictionToken$'\n                                                  | search ",'="*"'],["","\n                                                  | eval residual = '$regressionTargetToken$' - '$regressionPredictionToken$'\n                                                  | search ",'="*"']),_templateObject6=_taggedTemplateLiteral(["","\n                                          | search $regressionTargetToken|s$="," $regressionPredictionToken|s$=",""],["","\n                                          | search $regressionTargetToken|s$="," $regressionPredictionToken|s$=",""]),_templateObject7=_taggedTemplateLiteral(["| loadjob $","$\n                                   | head 1\n                                   | transpose\n                                   | fields column"],["| loadjob $","$\n                                   | head 1\n                                   | transpose\n                                   | fields column"]),_templateObject8=_taggedTemplateLiteral(['| loadjob $variableSearchJobIdToken$\n                                   | search column != "column" AND column != "_*"'],['| loadjob $variableSearchJobIdToken$\n                                   | search column != "column" AND column != "_*"']),_templateObject9=_taggedTemplateLiteral(['| loadjob $variableSearchJobIdToken$\n                                   | search column != "column" AND column != $regressionTargetToken|s$ AND (column != "_*" OR column = "_time")'],['| loadjob $variableSearchJobIdToken$\n                                   | search column != "column" AND column != $regressionTargetToken|s$ AND (column != "_*" OR column = "_time")']),_templateObject10=_taggedTemplateLiteral(["| loadjob $searchBarSearchJobIdToken$\n                                   | sample partitions=100"],["| loadjob $searchBarSearchJobIdToken$\n                                   | sample partitions=100"]),_templateObject11=_taggedTemplateLiteral(["| loadjob $dataPartitionJobIdToken$\n                                   | search partition_number < $trainingSetFractionToken$\n                                   | fields - partition_number\n                                   $preprocessTrainingSPLToken$\n                                   ",""],["| loadjob $dataPartitionJobIdToken$\n                                   | search partition_number < $trainingSetFractionToken$\n                                   | fields - partition_number\n                                   $preprocessTrainingSPLToken$\n                                   ",""]),_templateObject12=_taggedTemplateLiteral(["| loadjob $dataPartitionJobIdToken$\n                                   | search partition_number >= $testSetFractionToken$\n                                   | fields - partition_number\n                                   $preprocessTestingSPLToken$"],["| loadjob $dataPartitionJobIdToken$\n                                   | search partition_number >= $testSetFractionToken$\n                                   | fields - partition_number\n                                   $preprocessTestingSPLToken$"]),_templateObject13=_taggedTemplateLiteral(["| loadjob $testingJobIdToken$ ",""],["| loadjob $testingJobIdToken$ ",""]),LinearRegressionView=_BaseAssistantView2["default"].extend({headerOptions:{title:"Predict Numeric Fields",description:"Predict the value of a numeric field using a weighted combination of the values of other fields in that event."},tabOptions:{primaryTabTitle:"Create New Model",historyTabTitle:"Load Existing Settings"},showScheduleButton:!0,submitButtonText:"Fit Model",searchBarTooltip:"The events returned should have at least one numeric field and one other field.",render:function(){function getPreprocessingFitArray(){return self.assistantFormView.preprocessPanel.buildFitSPLArray(Forms.getToken("modelNameToken"))}function getFitCommentsArray(){var fitSPLArray=self.assistantFormView.preprocessPanel.buildFitSPLArray(Forms.getToken("modelNameToken")),commentsArray=new Array(fitSPLArray.length);return commentsArray.length>0&&(commentsArray[0]="apply preprocessing steps"),commentsArray.concat("fit and save a model using the entire dataset and provided parameters")}function getApplyArray(){var applySPLArray=self.assistantFormView.preprocessPanel.buildApplySPLArray(Forms.getToken("modelNameToken"));return applySPLArray.concat("| apply $modelNameToken|s$")}function getApplyCommentsArray(){var applySPLArray=self.assistantFormView.preprocessPanel.buildApplySPLArray(Forms.getToken("modelNameToken")),commentsArray=new Array(applySPLArray.length);return commentsArray.length>0&&(commentsArray[0]="apply preprocessing models"),commentsArray.concat('apply the model to the entire dataset to predict "'+Forms.getToken("regressionTargetToken")+'"')}function startPostProcessingSearches(){Searches.startSearch("dataAndPredictionsTableSearch"),Searches.startSearch("actualVsPredictedScatterPlotSearch"),Searches.startSearch("actualVsPredictedAndResidualSearch"),Searches.startSearch("residualsHistogramPlotSearch"),Searches.startSearch("regressionstatisticsSearch"),Searches.startSearch(Forms.getToken("decisionTreeSummaryVizToken")?"decisionTreeSummaryVizSearch":"fitModelSummaryTableSearch")}function submitForm(){!self.assistantFormView.footer.getDisabled()&&controlValidity.getAll()&&(currentSampleSearch=null,self.hideErrorMessage(),self.hideResults(),Forms.setToken("preprocessTrainingSPLToken",getPreprocessingFitArray().join("")),Forms.setToken("preprocessTestingSPLToken",Forms.parseTemplate(getApplyArray().join(""))),null==actualVsPredictedLinesPanel.sortByControl.val()?actualVsPredictedLinesPanel.sortByControl.val(Forms.getChoiceViewChoices(actualVsPredictedLinesPanel.sortByControl)[0]):actualVsPredictedLinesPanel.sortByControl.trigger("change"),dataAndPredictionsPanel.setSchedulingDisabled(Forms.getToken("modelNameToken")===defaultModelName,"You must specify a model name to schedule alerts."),self.model.experiment?(updateExperiment(),self.model.experiment.save({},{success:function(model,response){Searches.getSearchManager("dataPartitionSearch").startSearch()},error:function(model,response){self.showErrorMessage(response.responseText)}})):Searches.getSearchManager("dataPartitionSearch").startSearch())}function updateExperiment(){self.addBasicExperimentInfo();var preprocessingModels=self.assistantFormView.preprocessPanel.preprocessCollection.models,searchStages=_underscoreMltk2["default"].map(preprocessingModels,function(model){return model.asSearchStage()}),mainSearchStage={type:"main",settings:{algorithm:Forms.getToken("regressionAlgorithmToken"),params:getRegressionAlgorithmParamsList(),targetVariable:Forms.getToken("regressionTargetToken"),featureVariables:Forms.getToken("rawRegressionFeaturesToken"),modelName:Forms.getToken("modelNameToken")||""}};searchStages.push(mainSearchStage),self.model.experiment.set({searchStages:searchStages})}function setCurrentSampleSearch(sampleSearch){if(currentSampleSearch=_underscoreMltk2["default"].extend({},{regressionAlgorithm:defaultRegressionAlgorithm,regressionAlgorithmParams:[],trainingFraction:50},sampleSearch),self.assistantFormView.searchBarControl.setProperties(sampleSearch.value,sampleSearch.earliestTime,sampleSearch.latestTime),regressionAlgorithmControl.val(currentSampleSearch.regressionAlgorithm),null!=regressionAlgorithmParamsList[currentSampleSearch.regressionAlgorithm]){var parsedParams=(0,_ParseAlgorithmParameters2["default"])(currentSampleSearch.regressionAlgorithmParams);regressionAlgorithmParamsList[currentSampleSearch.regressionAlgorithm].forEach(function(paramName){var control=regressionAlgorithmParamsControls[paramName],paramValue=parsedParams[paramName];"checkbox"===control.control._viz.attr("type")?Forms.setCheckboxViewFromString(control.control,paramValue,control.control.options["default"]):control.control.val(null!=paramValue?paramValue:control.control.options["default"])})}null!=currentSampleSearch.modelName&&modelNameInputControl.val(currentSampleSearch.modelName),trainingSetFractionSlider.val(currentSampleSearch.trainingFraction)}function updateForm(newIsRunningValue,message){if(null!=newIsRunningValue&&(isRunning=newIsRunningValue),regressionAlgorithmControl.settings.set("disabled",isRunning),targetVariableControl.settings.set("disabled",isRunning),featuresVariableControl.settings.set("disabled",isRunning),trainingSetFractionSlider.setDisabled(isRunning),modelNameInputControl.settings.set("disabled",isRunning),_underscoreMltk2["default"].each(regressionAlgorithmParamsControls,function(control){return control.control.settings.set("disabled",isRunning)}),self.assistantFormView.preprocessPanel.setDisabled(isRunning),isRunning)self.assistantFormView.footer.setDisabled(isRunning,message);else{var regressionTargetToken=Forms.getToken("regressionTargetToken"),regressionFeaturesToken=Forms.getToken("regressionFeaturesToken"),fieldsValid=null!=regressionTargetToken&&regressionTargetToken.length>0&&null!=regressionFeaturesToken&&regressionFeaturesToken.length>0;self.assistantFormView.footer.setDisabled(!fieldsValid),self.assistantFormView.footer.controls.submitButton.text(submitButtonText)}}function updateRegressionAlgorithmParamsControls(){var regressionAlgorithm=Forms.getToken("regressionAlgorithmToken"),controlWrappers=[];null!=regressionAlgorithmParamsList[regressionAlgorithm]&&(controlValidity.clear(_underscoreMltk2["default"].map(regressionAlgorithmParamsControls,function(control){return control.control.id})),regressionAlgorithmParamsList[regressionAlgorithm].forEach(function(paramName){var control=regressionAlgorithmParamsControls[paramName];control.control.val(control.control.options["default"]),controlWrappers.push(control.wrapper)})),regressionAlgorithmParamsControlsWrapper.children().detach(),regressionAlgorithmParamsControlsWrapper.append(controlWrappers)}function getRegressionAlgorithmParamsList(){var regressionAlgorithm=Forms.getToken("regressionAlgorithmToken"),algorithmParams=[];return null!=regressionAlgorithmParamsList[regressionAlgorithm]&&regressionAlgorithmParamsList[regressionAlgorithm].forEach(function(paramName){var tokenValue=Forms.getToken(paramName+"Token");null!=tokenValue&&""!==tokenValue&&algorithmParams.push(paramName+"="+tokenValue)}),algorithmParams}function updateRegressionAlgorithmParamsToken(){var algorithmParams=getRegressionAlgorithmParamsList().join(" ");Forms.setToken("regressionAlgorithmParamsToken",algorithmParams)}function updateSummaryVisualizationType(){Forms.getToken("decisionTreeSummaryVizToken")?(decisionTreeVizPanel.show(),fitModelSummaryPanel.hide()):(decisionTreeVizPanel.hide(),fitModelSummaryPanel.show())}var self=this;_BaseAssistantView2["default"].prototype.render.call(this);var _utils$getPageInfo=_utils2["default"].getPageInfo(),appName=_utils$getPageInfo.app,showcaseName=_utils$getPageInfo.page,defaultModelName=_Options2["default"].getOptionByName("defaultModelName"),defaultVizHeight=_Options2["default"].getOptionByName("defaultVizHeight"),defaultRegressionAlgorithm="LinearRegression",currentSampleSearch=null,isRunning=!1,controlValidity=new _ControlValidityStore2["default"],regressionAlgorithmParamsList={LinearRegression:["fit_intercept"],RandomForestRegressor:["n_estimators","max_depth","max_features","min_samples_split","max_leaf_nodes"],Lasso:["alpha"],KernelRidge:["gamma"],ElasticNet:["fit_intercept","normalize","alpha","l1_ratio"],Ridge:["fit_intercept","normalize","alpha"],DecisionTreeRegressor:["max_depth","max_features","min_samples_split","max_leaf_nodes","splitter"]},submitButtonText="Fit Model",historyCollectionId=showcaseName+"_history",historySerializer=new _ShowcaseHistorySerializer2["default"](historyCollectionId,{search_query:null,earliest_time:null,latest_time:null,preprocess_query:null,regression_algorithm:null,regression_algorithm_params:null,target:null,features:null,training_fraction:null,model_name:null,_time:null,r_squared:null,rmse:null},function(){Searches.getSearchManager("queryHistorySearch").startSearch()});self.assistantFormView.preprocessPanel.render().$el.appendTo(self.assistantFormView.preprocessWrapper),function(){Searches.setSearch("queryHistorySearch",{searchString:(0,_compactTemplateString2["default"])(_templateObject,historyCollectionId,defaultRegressionAlgorithm)})}();var regressionAlgorithmControl=function(){var control=new _dropdownview2["default"]({id:"regressionAlgorithmControl",el:self.$el.find("#regressionAlgorithmControl"),showClearButton:!1,choices:Object.keys(regressionAlgorithmParamsList).map(function(algorithm){return{value:algorithm}})}).on("change",function(value){Forms.setToken("regressionAlgorithmToken",value),Forms["DecisionTreeRegressor"===value?"setToken":"unsetToken"]("decisionTreeSummaryVizToken",!0),updateSummaryVisualizationType(),updateRegressionAlgorithmParamsControls(),updateRegressionAlgorithmParamsToken()}).render();return control.$el.prev("label").tooltip({title:"Select an algorithm to use for predicting field values."}),control}(),featuresVariableControl=function(){var control=new _EnhancedMultiDropdownView2["default"]({id:"featuresVariableControl",managerid:"featuresVariableSearch",el:self.$el.find("#featuresVariableControl"),labelField:"column",valueField:"column",width:400,allowCustomValues:!0});return control.$el.prev("label").tooltip({title:"Select the field(s) to use for predicting the value of the selected numeric field."}),control.on("datachange",function(){if(null!=currentSampleSearch){var choices=Forms.getChoiceViewChoices(control),validChoices=Forms.intersect(choices,currentSampleSearch.featuresVariables,!0);control.val(validChoices),currentSampleSearch.autostart!==!1&&self.assistantFormView.footer.controls.submitButton.trigger("submit"),currentSampleSearch=null}}),control.on("change",function(){var values=control.val();Forms.setToken("rawRegressionFeaturesToken",values),null!=values&&values.length>0?Forms.setToken("regressionFeaturesToken",values.map(Forms.escape).join(" ")):Forms.unsetToken("regressionFeaturesToken"),updateForm()}),control.render(),control}(),targetVariableControl=function(){var control=new _dropdownview2["default"]({id:"targetVariableControl",managerid:"targetVariableSearch",el:self.$el.find("#targetVariableControl"),labelField:"column",valueField:"column",showClearButton:!1});return control.$el.prev("label").tooltip({title:"Select a numeric field to predict. Note: a field containing numbers may not be numeric (e.g., port number). As a rule of thumb, if summing the field is meaningful, it is likely numeric."}),control.on("datachange",function(){if(null!=currentSampleSearch&&self.assistantFormView.preprocessPanel.isPreprocessingComplete()){var choices=Forms.getChoiceViewChoices(control);choices.indexOf(currentSampleSearch.targetVariable)>=0&&control.val(currentSampleSearch.targetVariable)}}),control.on("change",function(){Forms.unsetToken(["regressionFeaturesToken","regressionTargetToken","regressionPredictionToken"]),Forms.clearChoiceView(featuresVariableControl);var targetVariable=control.val();null!=targetVariable&&targetVariable.length>0&&(Forms.setToken("regressionTargetToken",targetVariable),Forms.setToken("regressionPredictionToken","predicted("+targetVariable+")")),updateForm()}),control.render(),control}(),trainingSetFractionSlider=function(){function updateTrainingSetFractionSlider(trainingFraction){var testFraction=100-trainingFraction,sliderText="",tooltipText="";testFraction>0?(sliderText=trainingFraction+" / "+testFraction,tooltipText="Select the percentage of the events to use for training and for testing, respectively."):(sliderText="no split",tooltipText="100% of the data will be used for training. Note: the test statistics reflect how well the model predicts the training data."),sliderValue$El.text(sliderText),slider$El.prev("label").tooltip("destroy").tooltip({title:tooltipText})}var slider$El=self.$el.find("#trainingSetFractionSlider"),sliderValue$El=self.$el.find("#trainingSetFractionSliderValue");return new _Slider2["default"](slider$El,10,100,0,10,function(value){updateTrainingSetFractionSlider(value)},function(value){Forms.setToken("trainingSetFractionToken",value),Forms.setToken("testSetFractionToken",100===value?0:value),updateTrainingSetFractionSlider(value)})}(),regressionAlgorithmParamsControlsWrapper=self.$el.find("#regressionAlgorithmParamsControlsWrapper"),regressionAlgorithmParamsControls=function(){function textInputOnChange(control,value,tokenName){var isValid=control.getValidity();controlValidity.set(control.id,isValid),Forms[isValid?"setToken":"unsetToken"](tokenName,value),updateRegressionAlgorithmParamsToken()}var controls={n_estimators:{},max_depth:{},max_features:{},min_samples_split:{},alpha:{},gamma:{},fit_intercept:{},normalize:{},l1_ratio:{},max_leaf_nodes:{},splitter:{}};return controls.n_estimators.control=new _EnhancedTextInputView2["default"]({id:"n_estimatorsControl",el:(0,_jquery2["default"])("<div>"),"default":"",optional:!0,validator:{type:"number",message:"Value must be a positive integer.",allowFloats:!1,min:1}}).on("change",function(value){textInputOnChange(this,value,"n_estimatorsToken")}).render(),controls.n_estimators.wrapper=Forms.createInputControlWrapper(controls.n_estimators.control.$el,"N Estimators","The number of trees in the forest. Defaults to 10."),controls.max_depth.control=new _EnhancedTextInputView2["default"]({id:"max_depthControl",el:(0,_jquery2["default"])("<div>"),"default":"",optional:!0,validator:{type:"number",message:"Value must be a positive integer.",allowFloats:!1,min:1}}).on("change",function(value){textInputOnChange(this,value,"max_depthToken")}).render(),controls.max_depth.wrapper=Forms.createInputControlWrapper(controls.max_depth.control.$el,"Max Depth",'The maximum depth of the tree. If unset, then nodes are expanded until all leaves are pure or until all leaves contain fewer samples than specified by "Min Samples Split". Ignored if "Max Leaf Nodes" is set.'),controls.max_features.control=new _EnhancedTextInputView2["default"]({id:"max_featuresControl",el:(0,_jquery2["default"])("<div>"),"default":"",optional:!0,validator:{type:"custom",message:'Value must be a positive number or one of "auto", "sqrt", or "log2"',validate:function(value){return["auto","sqrt","log2"].indexOf(value)>=0||NumberValidator.validate(value,{allowFloats:!0,min:0,minExclusive:!0})}}}).on("change",function(value){textInputOnChange(this,value,"max_featuresToken")}).render(),controls.max_features.wrapper=Forms.createInputControlWrapper(controls.max_features.control.$el,"Max Features",{html:!0,title:'<div style="text-align: left">\n                        The number of features to consider at each split.\n                        <br>\n                        This field supports one of several value types:\n                        <ul>\n                            <li>integer: consider this many features at each split</li>\n                            <li>float: consider the total number of features multiplied by this value</li>\n                            <li>"sqrt": consider the square root of the total number of features</li>\n                            <li>"log2": consider the base-2 logarithm of the total number of features</li>\n                        </ul>\n                        If unset, consider all features at each split\n                    </div>'}),controls.min_samples_split.control=new _EnhancedTextInputView2["default"]({id:"min_samples_splitControl",el:(0,_jquery2["default"])("<div>"),"default":"",optional:!0,validator:{type:"number",message:"Value must be a positive integer.",allowFloats:!1,min:1}}).on("change",function(value){textInputOnChange(this,value,"min_samples_splitToken")}).render(),controls.min_samples_split.wrapper=Forms.createInputControlWrapper(controls.min_samples_split.control.$el,"Min Samples Split","The minimum number of samples required to split an internal node. Defaults to 2."),controls.alpha.control=new _EnhancedTextInputView2["default"]({id:"alphaControl",el:(0,_jquery2["default"])("<div>"),"default":"",optional:!0,validator:{type:"number",message:"Value must be a positive number or zero.",allowFloats:!0,min:0}}).on("change",function(value){textInputOnChange(this,value,"alphaToken")}).render(),controls.alpha.wrapper=Forms.createInputControlWrapper(controls.alpha.control.$el,"Alpha","Constant that multiplies the L1 term. Defaults to 1.0."),controls.gamma.control=new _EnhancedTextInputView2["default"]({id:"gammaControl",el:(0,_jquery2["default"])("<div>"),"default":"",optional:!0,validator:{type:"number",message:"Value must be a positive number or zero.",allowFloats:!0,min:0}}).on("change",function(value){textInputOnChange(this,value,"gammaToken")}).render(),controls.gamma.wrapper=Forms.createInputControlWrapper(controls.gamma.control.$el,"Gamma","Controls the width of the radial basis function kernel. Defaults to 1/number of fields."),controls.fit_intercept.control=new _checkboxview2["default"]({id:"fit_interceptControl",el:(0,_jquery2["default"])("<div>"),"default":!0}).on("change",function(value){Forms.setToken("fit_interceptToken",value),updateRegressionAlgorithmParamsToken()}).render(),controls.fit_intercept.wrapper=Forms.createInputControlWrapper((0,_jquery2["default"])("<label>").addClass("checkbox").append(controls.fit_intercept.control.$el,(0,_jquery2["default"])("<span>").text("estimate the intercept")),"Fit Intercept","Whether or not the model should include an implicit intercept term."),controls.normalize.control=new _checkboxview2["default"]({id:"normalizeControl",el:(0,_jquery2["default"])("<div>"),"default":!1}).on("change",function(value){Forms.setToken("normalizeToken",value),updateRegressionAlgorithmParamsToken()}).render(),controls.normalize.wrapper=Forms.createInputControlWrapper((0,_jquery2["default"])("<label>").addClass("checkbox").append(controls.normalize.control.$el,(0,_jquery2["default"])("<span>").text("normalize before regression")),"Normalize",'Whether or not to normalize the values of the fields in "Fields to use for predicting".'),controls.l1_ratio.control=new _EnhancedTextInputView2["default"]({id:"l1_ratioControl",el:(0,_jquery2["default"])("<div>"),"default":"",optional:!0,validator:{type:"number",message:"Value must be a positive number between 0 and 1.",allowFloats:!0,min:0,max:1}}).on("change",function(value){textInputOnChange(this,value,"l1_ratioToken")}).render(),controls.l1_ratio.wrapper=Forms.createInputControlWrapper(controls.l1_ratio.control.$el,"L1 Ratio","The ElasticNet mixing parameter. For l1_ratio = 0 the penalty is an L2 penalty. For l1_ratio = 1 it is an L1 penalty. For 0 < l1_ratio < 1, the penalty is a combination of L1 and L2. Defaults to 0.5."),controls.max_leaf_nodes.control=new _EnhancedTextInputView2["default"]({id:"max_leaf_nodesControl",el:(0,_jquery2["default"])("<div>"),"default":"",optional:!0,validator:{type:"number",message:"Value must be an integer greater than 1.",allowFloats:!1,min:2}}).on("change",function(value){textInputOnChange(this,value,"max_leaf_nodesToken")}).render(),controls.max_leaf_nodes.wrapper=Forms.createInputControlWrapper(controls.max_leaf_nodes.control.$el,"Max Leaf Nodes",'Grow the tree in best-first fashion until it has this many leaf nodes. Best nodes are defined as relative reduction in impurity. If unset, allows an unlimited number of leaf nodes. "Max Depth" is ignored if this is set.'),controls.splitter.control=new _radiogroupview2["default"]({id:"splitterControl",el:(0,_jquery2["default"])("<div>"),"default":"best",choices:[{value:"best"},{value:"random"}]}).on("change",function(value){var tokenName="splitterToken";Forms.setToken(tokenName,value),updateRegressionAlgorithmParamsToken()}).render(),controls.splitter.control.$el.addClass("mlts-radiogroup-inline"),controls.splitter.wrapper=Forms.createInputControlWrapper(controls.splitter.control.$el,"Splitter","The strategy used to choose the split at each node. Supported strategies are “best” to choose the best split and “random” to choose the best random split."),
controls}(),modelNameInputControl=function(){function updateModelName(){var modelName=control.val(),isValid=!control.settings.get("invalid");controlValidity.set(control.id,isValid),isValid&&Forms.setToken("modelNameToken",null==modelName||0===modelName.length?defaultModelName:modelName),self.assistantFormView.footer.setSchedulingDisabled(!isValid||Forms.getToken("modelNameToken")===defaultModelName,"You must specify a valid model name to fit a model on a schedule.")}var control=new _EnhancedTextInputView2["default"]({id:"modelNameInputControl",el:self.$el.find("#modelNameInputControl"),validator:{type:"modelName"},changeOnKeyup:!0,optional:!0}).render();return control.$el.prev("label").tooltip({title:"Enter a name for the model so you can refer to it later. You might include information like the name of the dataset, the field you are predicting, or the algorithm being used."}),control.on("change",updateModelName),control._viz.on("keyup",function(event){13===event.keyCode&&submitForm()}),updateModelName(),control}();new _QueryHistoryTable2["default"](self.$el.find("#queryHistoryPanel"),"queryHistorySearch",historyCollectionId,["Actions","_time","Search query","Preprocess Settings","Algorithm","Algorithm Settings","Field to predict","Fields to use for predicting","Split for training / test","Model name","R² Statistic","RMSE"],submitButtonText,function(params,autostart){var sampleSearch={value:params.data["row.search_query"],targetVariable:params.data["row.target"],featuresVariables:"string"==typeof params.data["row.features"]?[params.data["row.features"]]:params.data["row.features"],modelName:params.data["row.model_name"],trainingFraction:params.data["row.training_fraction"],autostart:autostart,earliestTime:params.data["row.earliest_time"],latestTime:params.data["row.latest_time"]},preprocessSteps=params.data["row.preprocess_query"];null!=preprocessSteps&&(sampleSearch.preprocessSteps=preprocessSteps);var regressionAlgorithm=params.data["row.regression_algorithm"];null!=regressionAlgorithm&&(sampleSearch.regressionAlgorithm=regressionAlgorithm);var regressionAlgorithmParams=params.data["row.regression_algorithm_params"];null!=regressionAlgorithmParams&&(sampleSearch.regressionAlgorithmParams="string"==typeof regressionAlgorithmParams?[regressionAlgorithmParams]:regressionAlgorithmParams),self.assistantFormView.tabs.activate("primaryTab"),setCurrentSampleSearch(sampleSearch)}).render();var dataAndPredictionsPanel=function(){return new _Master2["default"]({el:self.$el.find("#dataAndPredictionsPanel"),title:"Prediction Results",viz:_tableview2["default"],vizOptions:{id:"dataAndPredictionsTable",managerid:"dataAndPredictionsTableSearch",drilldown:"none"},footerButtons:{scheduleAlertButton:!0}})}(),actualVsPredictedLinesPanel=function(){var _vizOptions,vizName="LinesViz",LinesViz=_visualizationregistry2["default"].getVisualizer(appName,vizName),vizOptions=DrilldownLinker.parseVizOptions({category:"custom",type:appName+"."+vizName}),assistantPanel=new _Master2["default"]({el:self.$el.find("#actualVsPredictedLinesPanel"),title:"Actual vs. Predicted Line Chart",tooltip:"Compare the values predicted by the model to the true values. Better models produce more similar lines.",viz:LinesViz,vizOptions:(_vizOptions={id:"actualPredictedLinesViz",height:defaultVizHeight-40,managerid:"actualVsPredictedLinesPlotSearch"},_defineProperty(_vizOptions,appName+"."+vizName+".onClick",function(series,point){var seriesName=Forms.escape(series.label),pointValue=Forms.escape(null!=point.originalY?point.originalY:point.y),applySPL=[self.model.searchInfo.get("baseSearchString")].concat(getApplyArray()).join(""),searchString=(0,_compactTemplateString2["default"])(_templateObject2,applySPL,seriesName,pointValue),search=DrilldownLinker.createSearch(searchString,self.model.searchInfo.get("baseTimerange"));window.open(DrilldownLinker.getUrl("search",search,vizOptions),"_blank")}),_defineProperty(_vizOptions,appName+"."+vizName+".onLegendItemClick",function(series){var seriesName=Forms.escape(series.label),applySPL=[self.model.searchInfo.get("baseSearchString")].concat(getApplyArray()).join(""),searchString=(0,_compactTemplateString2["default"])(_templateObject3,applySPL,seriesName),search=DrilldownLinker.createSearch(searchString,self.model.searchInfo.get("baseTimerange"));window.open(DrilldownLinker.getUrl("search",search,vizOptions),"_blank")}),_vizOptions)}),sortByControl$El=(0,_jquery2["default"])("<div>");assistantPanel.sortByWrapper=(0,_jquery2["default"])("<div>").attr("id","actualVsPredictedLinesSortBy").append((0,_jquery2["default"])("<label>").text("Sort by:"),sortByControl$El),assistantPanel.sortByWrapper.insertAfter(assistantPanel.header);var choices=[{label:"Default Sort",value:""},{label:"Actual Value",value:"$regressionTargetToken|s$"},{label:"Predicted Value",value:"$regressionPredictionToken|s$"}];return assistantPanel.sortByControl=new _dropdownview2["default"]({id:"actualVsPredictedLinesSortByControl",el:sortByControl$El,showClearButton:!1,labelField:"column",valueField:"column",choices:choices}),assistantPanel.sortByControl.on("change",function(){var sortBy=assistantPanel.sortByControl.val();null!=sortBy&&sortBy.length>0?(Forms.setToken("actualVsPredictedSortByEvalToken",Forms.parseTemplate(" | eval _sortBy = "+sortBy)),Forms.setToken("actualVsPredictedSortByToken",Forms.parseTemplate(" | sort 0 "+sortBy))):(Forms.setToken("actualVsPredictedSortByEvalToken",""),Forms.setToken("actualVsPredictedSortByToken","")),Searches.getSearchManager("actualVsPredictedAndResidualSearch").startSearch()}).render(),assistantPanel}(),residualsLinePanel=function(){var _vizOptions2,vizName="LinesViz",LinesViz=_visualizationregistry2["default"].getVisualizer(appName,vizName),vizOptions=DrilldownLinker.parseVizOptions({category:"custom",type:appName+"."+vizName});return new _Master2["default"]({el:self.$el.find("#residualsLinePanel"),title:"Residuals Line Chart",tooltip:"Residuals are the difference between the predicted values and the true values (prediction error). Better models produce smaller residuals.",viz:LinesViz,vizOptions:(_vizOptions2={id:"residualsLineViz",height:defaultVizHeight,managerid:"residualsLinePlotSearch"},_defineProperty(_vizOptions2,appName+"."+vizName+".onClick",function(series,point){var seriesName=Forms.escape(series.label),pointValue=Forms.escape(null!=point.originalY?point.originalY:point.y),applySPL=[self.model.searchInfo.get("baseSearchString")].concat(getApplyArray()).join(""),searchString=(0,_compactTemplateString2["default"])(_templateObject4,applySPL,seriesName,pointValue),search=DrilldownLinker.createSearch(searchString,self.model.searchInfo.get("baseTimerange"));window.open(DrilldownLinker.getUrl("search",search,vizOptions),"_blank")}),_defineProperty(_vizOptions2,appName+"."+vizName+".onLegendItemClick",function(series){var seriesName=Forms.escape(series.label),applySPL=[self.model.searchInfo.get("baseSearchString")].concat(getApplyArray()).join(""),searchString=(0,_compactTemplateString2["default"])(_templateObject5,applySPL,seriesName),search=DrilldownLinker.createSearch(searchString,self.model.searchInfo.get("baseTimerange"));window.open(DrilldownLinker.getUrl("search",search,vizOptions),"_blank")}),_vizOptions2)})}(),actualVsPredictedScatterLinePanel=function(){var vizName="ScatterLineViz",ScatterLineViz=_visualizationregistry2["default"].getVisualizer(appName,vizName);return new _Master2["default"]({el:self.$el.find("#actualVsPredictedScatterLinePanel"),title:"Actual vs. Predicted Scatter Chart",tooltip:"Compare the values predicted by the model to the true values. Better models produce dots closer to the diagonal line.",viz:ScatterLineViz,vizOptions:_defineProperty({id:"actualVsPredictedScatterLineViz",height:defaultVizHeight,managerid:"actualVsPredictedScatterPlotSearch"},appName+"."+vizName+".onClick",function(pointData){var actualValue=Forms.escape(null!=pointData.originalX?pointData.originalX:pointData.x),predictedValue=Forms.escape(null!=pointData.originalX?pointData.originalY:pointData.y),applySPL=[self.model.searchInfo.get("baseSearchString")].concat(getApplyArray()).join(""),searchString=(0,_compactTemplateString2["default"])(_templateObject6,applySPL,actualValue,predictedValue),search=DrilldownLinker.createSearch(searchString,self.model.searchInfo.get("baseTimerange")),searchUrl=DrilldownLinker.getUrl("search",search);window.open(searchUrl,"_blank")})})}(),residualsHistogramPanel=function(){var vizName="HistogramViz",HistogramViz=_visualizationregistry2["default"].getVisualizer(appName,vizName);return new _Master2["default"]({el:self.$el.find("#residualsHistogramPanel"),title:"Residuals Histogram",tooltip:"Residuals are the difference between the predicted values and the true values (prediction error). Better models produce residuals closer to the vertical line.",viz:HistogramViz,vizOptions:_defineProperty({id:"residualsHistogramViz",height:defaultVizHeight,managerid:"residualsHistogramPlotSearch"},appName+"."+vizName+".linePosition",0)})}(),regressionStatisticsPanel=function(){var footer=new _Footer2["default"](self.$el.find("#regressionStatisticsPanel"));return footer.spinnerAnchor=footer.footer.parent(".mlts-panel"),footer}(),r2StatisticPanel=function(){return new _Master2["default"]({el:self.$el.find("#r2StatisticPanel"),title:"R<sup>2</sup> Statistic",tooltip:{html:!0,title:"The square of the correlation coefficient between the predicted and actual values. Better models have an R<sup>2</sup> closer to 1."},viz:_singleview2["default"],vizOptions:{id:"r2StatisticViz",managerid:"regressionstatisticsSearch",field:"rSquared",numberPrecision:"0.0000",height:30},footerButtons:!1})}(),rootMeanSquaredErrorStatisticPanel=function(){return new _Master2["default"]({el:self.$el.find("#rootMeanSquaredErrorStatisticPanel"),title:"Root Mean Squared Error (RMSE)",tooltip:"The quadratic mean of the prediction errors (residuals). Better models have a smaller RMSE.",viz:_singleview2["default"],vizOptions:{id:"rootMeanSquaredErrorStatisticViz",managerid:"regressionstatisticsSearch",field:"RMSE",numberPrecision:"0.00",height:30},footerButtons:!1})}(),fitModelSummaryPanel=function(){return new _Master2["default"]({el:self.$el.find("#fitModelSummaryPanel"),title:"Fit Model Parameters Summary",tooltip:'The coefficients and intercept learned via linear regression. Note that a large coefficient does not imply that a field is "important".',viz:_tableview2["default"],vizOptions:{id:"fitModelSummaryTable",managerid:"fitModelSummaryTableSearch",pageSize:5}})}(),decisionTreeVizPanel=function(){return new _Master2["default"]({el:self.$el.find("#decisionTreeVizPanel"),title:"Decision Tree",tooltip:'The coefficients and intercept learned via linear regression. Note that a large coefficient does not imply that a field is "important".',viz:_tableview2["default"],vizOptions:{id:"decisionTreeSummaryViz",managerid:"decisionTreeSummaryVizSearch",pageSize:10}})}();return this.listenTo(self.assistantFormView.preprocessPanel,"stepChanged",function(){Forms.clearChoiceView(targetVariableControl,!0)}),this.listenTo(this.assistantFormView.preprocessPanel.preprocessCollection,"change:state",function(){updateForm(this.assistantFormView.preprocessPanel.isPreprocessingRunning(),"Preprocessing...")}),this.assistantFormView.footer.controls.submitButton.on("submit",function(){submitForm()}),this.assistantFormView.searchBarControl.events.on("change",function(){Forms.clearChoiceView(targetVariableControl,!0),Forms.clearChoiceView(featuresVariableControl,!0),Forms.unsetToken("classificationTargetToken","classificationFeaturesToken","classificationPredictionToken"),updateForm(),Searches.startSearch("searchBarSearch")}),function(){var searchBarSearch=Searches.getSearchManager("searchBarSearch");searchBarSearch.on("onStartCallback",function(){self.hideErrorMessage(),self.hideResults()}),searchBarSearch.on("onDoneCallback",function(){self.hideErrorMessage(),null!=currentSampleSearch&&null!=currentSampleSearch.preprocessSteps&&self.assistantFormView.preprocessPanel.loadSteps(currentSampleSearch.preprocessSteps)}),searchBarSearch.on("onErrorCallback",function(errorMessage){Forms.clearChoiceViewOptions(targetVariableControl),self.showErrorMessage(errorMessage),self.hideResults()})}(),function(){Searches.setSearch("variableSearch",{targetJobIdTokenName:"variableSearchJobIdToken",searchString:(0,_compactTemplateString2["default"])(_templateObject7,self.assistantFormView.preprocessSearchJobIdTokenName),onErrorCallback:function(errorMessage){self.showErrorMessage(errorMessage),self.hideResults()}})}(),function(){Searches.setSearch("targetVariableSearch",{searchString:(0,_compactTemplateString2["default"])(_templateObject8),onErrorCallback:function(errorMessage){self.showErrorMessage(errorMessage),self.hideResults()}})}(),function(){Searches.setSearch("featuresVariableSearch",{searchString:(0,_compactTemplateString2["default"])(_templateObject9),onErrorCallback:function(errorMessage){self.showErrorMessage(errorMessage),self.hideResults()}})}(),function(){Searches.setSearch("dataPartitionSearch",{targetJobIdTokenName:"dataPartitionJobIdToken",autostart:!1,searchString:(0,_compactTemplateString2["default"])(_templateObject10),onStartCallback:function(){self.hideErrorMessage(),updateForm(!0,"Fitting Model...")},onDoneCallback:function(){Searches.getSearchManager("trainingSearch").startSearch()},onErrorCallback:function(errorMessage){updateForm(!1),self.showErrorMessage(errorMessage),self.hideResults()}})}(),function(){var sharedSearchString="| fit $regressionAlgorithmToken$ $regressionAlgorithmParamsToken$ $regressionTargetToken|s$ from $regressionFeaturesToken$ into $modelNameToken|s$";self.assistantFormView.footer.controls.openInSearchButton.on("click",function(){var search=DrilldownLinker.createSearch([self.model.searchInfo.get("baseSearchString")].concat(getPreprocessingFitArray(),[sharedSearchString]),self.model.searchInfo.get("baseTimerange"));window.open(DrilldownLinker.getUrl("search",search),"_blank")}),self.assistantFormView.footer.controls.showSPLButton.on("click",function(){(0,_SearchStringDisplay.showSearchStringModal)("trainingSearchStringDisplayModal","Fit a model on all your data in search",[self.model.searchInfo.get("baseSearchString")].concat(getPreprocessingFitArray(),[sharedSearchString]),[null].concat(getFitCommentsArray()),self.model.searchInfo.get("baseTimerange"))}),self.assistantFormView.footer.controls.scheduleButton.on("click",function(){var baseTimerange=self.model.searchInfo.get("baseTimerange"),scheduledSearchModal=new _Master4["default"]({searchString:Forms.parseTemplate([self.model.searchInfo.get("baseSearchString")].concat(getPreprocessingFitArray(),[sharedSearchString]).join("")),earliestTime:baseTimerange.earliest_time,latestTime:baseTimerange.latest_time});scheduledSearchModal.render().appendTo((0,_jquery2["default"])("body")).show()}),Searches.setSearch("trainingSearch",{targetJobIdTokenName:"trainingJobIdToken",autostart:!1,searchString:(0,_compactTemplateString2["default"])(_templateObject11,sharedSearchString),onStartCallback:function(searchManager){self.hideErrorMessage()},onDoneCallback:function(){Searches.getSearchManager("testingSearch").startSearch()},onErrorCallback:function(errorMessage){updateForm(!1),self.showErrorMessage(errorMessage),self.hideResults()}})}(),function(){Searches.setSearch("testingSearch",{targetJobIdTokenName:"testingJobIdToken",autostart:!1,searchString:(0,_compactTemplateString2["default"])(_templateObject12),onStartCallback:function(){var baseTimerange=self.model.searchInfo.get("baseTimerange"),testingSearchId=Searches.getSid("testingSearch");historySerializer.persist(testingSearchId,{search_query:self.model.searchInfo.get("baseSearchString"),earliest_time:baseTimerange.earliest_time,latest_time:baseTimerange.latest_time,preprocess_query:self.assistantFormView.preprocessPanel.getSerializedList(),regression_algorithm:Forms.getToken("regressionAlgorithmToken"),regression_algorithm_params:getRegressionAlgorithmParamsList(),target:Forms.getToken("regressionTargetToken"),features:Forms.getToken("rawRegressionFeaturesToken"),training_fraction:parseInt(Forms.getToken("trainingSetFractionToken"),10),model_name:Forms.getToken("modelNameToken"),_time:parseInt((new Date).valueOf()/1e3,10)})},onDoneCallback:function(){self.showResults(),startPostProcessingSearches()},onErrorCallback:function(errorMessage){self.showErrorMessage(errorMessage),self.hideResults()},onFinallyCallback:function(){updateForm(!1)}})}(),function(){var roundingSearchString="| eval $regressionPredictionToken$ = round('$regressionPredictionToken$', 2)",sharedSearchArray=["| eval residual = '$regressionTargetToken$' - '$regressionPredictionToken$'","| table $regressionTargetToken|s$, $regressionPredictionToken|s$, residual, $regressionFeaturesToken$"],vizQueryArray=[],vizQuerySearch=null,alertQueryArray=[];dataAndPredictionsPanel.openInSearchButton.on("click",function(){window.open(DrilldownLinker.getUrl("search",vizQuerySearch),"_blank")}),dataAndPredictionsPanel.showSPLButton.on("click",function(){(0,_SearchStringDisplay.showSearchStringModal)("dataAndPredictionsTableSearchStringDisplayModal",'Display the actual and predicted values of the "field to predict"',vizQueryArray,[null].concat(getApplyCommentsArray(),[null,"calculate the prediction error"]),self.model.searchInfo.get("baseTimerange"))}),dataAndPredictionsPanel.scheduleAlertButton.on("click",function(){new _NumericValueAlertModal2["default"]({baseSearchString:Forms.parseTemplate(alertQueryArray.join(" ")),predictedFieldName:Forms.getToken("regressionPredictionToken")}).render().appendTo((0,_jquery2["default"])("body")).show()}),Searches.setSearch("dataAndPredictionsTableSearch",{targetJobIdTokenName:"dataAndPredictionsTableToken",autostart:!1,searchString:["| loadjob $testingJobIdToken$"].concat(roundingSearchString,sharedSearchArray),onStartCallback:function(){var baseSearchStringArray=[self.model.searchInfo.get("baseSearchString")].concat(getApplyArray());vizQueryArray=baseSearchStringArray.concat(roundingSearchString,sharedSearchArray),alertQueryArray=baseSearchStringArray.concat(sharedSearchArray),vizQuerySearch=DrilldownLinker.createSearch(vizQueryArray,self.model.searchInfo.get("baseTimerange")),DrilldownLinker.setSearchDrilldown(dataAndPredictionsPanel.title,vizQuerySearch)}})}(),function(){var sharedSearchArray=["| table $regressionTargetToken|s$ $regressionPredictionToken|s$"],vizQueryArray=[],vizQuerySearch=null,vizOptions=DrilldownLinker.parseVizOptions({category:"custom",type:appName+".ScatterLineViz"});actualVsPredictedScatterLinePanel.openInSearchButton.on("click",function(){window.open(DrilldownLinker.getUrl("search",vizQuerySearch,vizOptions),"_blank")}),actualVsPredictedScatterLinePanel.showSPLButton.on("click",function(){(0,_SearchStringDisplay.showSearchStringModal)("actualVsPredictedScatterSearchStringDisplayModal","Plot actual vs. predicted values on a scatter chart",vizQueryArray,[null].concat(getApplyCommentsArray()),self.model.searchInfo.get("baseTimerange"),vizOptions)}),Searches.setSearch("actualVsPredictedScatterPlotSearch",{searchString:["| loadjob $testingJobIdToken$"].concat(sharedSearchArray),autostart:!1,onStartCallback:function(){Spinners.showLoadingOverlay(actualVsPredictedScatterLinePanel.viz.$el),vizQueryArray=[self.model.searchInfo.get("baseSearchString")].concat(getApplyArray(),sharedSearchArray),vizQuerySearch=DrilldownLinker.createSearch(vizQueryArray,self.model.searchInfo.get("baseTimerange")),DrilldownLinker.setSearchDrilldown(actualVsPredictedScatterLinePanel.title,vizQuerySearch,vizOptions)},onFinallyCallback:function(){Spinners.hideLoadingOverlay(actualVsPredictedScatterLinePanel.viz.$el)}})}(),function(){var sharedSearchArray=["| eval residual = '$regressionTargetToken$' - '$regressionPredictionToken$'","| table _time, $regressionTargetToken|s$, $regressionPredictionToken|s$, residual","$actualVsPredictedSortByToken$"];Searches.setSearch("actualVsPredictedAndResidualSearch",{searchString:["| loadjob $testingJobIdToken$"].concat(sharedSearchArray),autostart:!1,targetJobIdTokenName:"actualVsPredictedAndResidualToken",onStartCallback:function(){Spinners.showLoadingOverlay([actualVsPredictedLinesPanel.viz.$el,residualsLinePanel.viz.$el])},onDoneCallback:function(){Searches.getSearchManager("actualVsPredictedLinesPlotSearch").startSearch(),Searches.getSearchManager("residualsLinePlotSearch").startSearch()},onErrorCallback:function(){Spinners.hideLoadingOverlay([actualVsPredictedLinesPanel.viz.$el,residualsLinePanel.viz.$el])}})}(),function(){var vizQueryArray=[],vizQuerySearch=null,vizOptions=DrilldownLinker.parseVizOptions({category:"custom",type:appName+".LinesViz"});actualVsPredictedLinesPanel.openInSearchButton.on("click",function(){window.open(DrilldownLinker.getUrl("search",vizQuerySearch,vizOptions),"_blank")}),actualVsPredictedLinesPanel.showSPLButton.on("click",function(){(0,_SearchStringDisplay.showSearchStringModal)("actualVsPredictedLinesSearchStringDisplayModal","Plot actual vs. predicted values on a line chart",vizQueryArray,[null].concat(getApplyCommentsArray(),["select the fields to plot"]),self.model.searchInfo.get("baseTimerange"),vizOptions)}),Searches.setSearch("actualVsPredictedLinesPlotSearch",{searchString:["| loadjob $actualVsPredictedAndResidualToken$","$actualVsPredictedSortByEvalToken$","| table _time, $regressionTargetToken|s$, $regressionPredictionToken|s$, _sortBy"],autostart:!1,onStartCallback:function(){vizQueryArray=[self.model.searchInfo.get("baseSearchString")].concat(getApplyArray(),["| table _time, $regressionTargetToken|s$, $regressionPredictionToken|s$"]),vizQuerySearch=DrilldownLinker.createSearch(vizQueryArray,self.model.searchInfo.get("baseTimerange")),DrilldownLinker.setSearchDrilldown(actualVsPredictedLinesPanel.title,vizQuerySearch,vizOptions)},onFinallyCallback:function(){Spinners.hideLoadingOverlay(actualVsPredictedLinesPanel.viz.$el)}})}(),function(){var sharedSearchArray=["| table _time, residual"],vizQueryArray=[],vizQuerySearch=null,vizOptions=DrilldownLinker.parseVizOptions({category:"custom",type:appName+".LinesViz"});residualsLinePanel.openInSearchButton.on("click",function(){window.open(DrilldownLinker.getUrl("search",vizQuerySearch,vizOptions),"_blank")}),residualsLinePanel.showSPLButton.on("click",function(){(0,_SearchStringDisplay.showSearchStringModal)("residualsLineSearchStringDisplayModal","Plot prediction errors on a line chart",vizQueryArray,[null].concat(getApplyCommentsArray(),["calculate the prediction error"]),self.model.searchInfo.get("baseTimerange"),vizOptions)}),Searches.setSearch("residualsLinePlotSearch",{searchString:["| loadjob $actualVsPredictedAndResidualToken$"].concat(sharedSearchArray),autostart:!1,onStartCallback:function(){vizQueryArray=[self.model.searchInfo.get("baseSearchString")].concat(getApplyArray(),["| eval residual = '$regressionTargetToken$' - '$regressionPredictionToken$'"],sharedSearchArray),vizQuerySearch=DrilldownLinker.createSearch(vizQueryArray,self.model.searchInfo.get("baseTimerange")),DrilldownLinker.setSearchDrilldown(residualsLinePanel.title,vizQuerySearch,vizOptions)},onFinallyCallback:function(){Spinners.hideLoadingOverlay(residualsLinePanel.viz.$el)}})}(),function(){var sharedSearchArray=["| eval residual = '$regressionTargetToken$' - '$regressionPredictionToken$'","| `histogram(residual, 100)`",'| rename count as "Sample Count", residual as "Residual Error"'],vizQueryArray=[],vizQuerySearch=null,vizOptions=DrilldownLinker.parseVizOptions({category:"custom",type:appName+".HistogramViz"});residualsHistogramPanel.openInSearchButton.on("click",function(){window.open(DrilldownLinker.getUrl("search",vizQuerySearch,vizOptions),"_blank")}),residualsHistogramPanel.showSPLButton.on("click",function(){(0,_SearchStringDisplay.showSearchStringModal)("residualsHistogramPlotSearchStringDisplayModal","Plot prediction errors on a histogram chart",vizQueryArray,[null].concat(getApplyCommentsArray(),["calculate the prediction error","use the `histogram` macro to format the prediction error"]),self.model.searchInfo.get("baseTimerange"),vizOptions)}),Searches.setSearch("residualsHistogramPlotSearch",{searchString:["| loadjob $testingJobIdToken$"].concat(sharedSearchArray),autostart:!1,onStartCallback:function(){Spinners.showLoadingOverlay(residualsHistogramPanel.viz.$el),vizQueryArray=[self.model.searchInfo.get("baseSearchString")].concat(getApplyArray(),sharedSearchArray),vizQuerySearch=DrilldownLinker.createSearch(vizQueryArray,self.model.searchInfo.get("baseTimerange")),DrilldownLinker.setSearchDrilldown(residualsHistogramPanel.title,vizQuerySearch,vizOptions)},onFinallyCallback:function(){Spinners.hideLoadingOverlay(residualsHistogramPanel.viz.$el)}})}(),function(){var sharedSearchArray=["| summary $modelNameToken|s$","| table feature *"],vizQuerySearch=null;fitModelSummaryPanel.openInSearchButton.on("click",function(){window.open(DrilldownLinker.getUrl("search",vizQuerySearch),"_blank")}),fitModelSummaryPanel.showSPLButton.on("click",function(){(0,_SearchStringDisplay.showSearchStringModal)("fitModelSummaryTableSearchStringDisplayModal","Inspect the model coefficients",sharedSearchArray,["load the model coefficients"])}),Searches.setSearch("fitModelSummaryTableSearch",{searchString:sharedSearchArray,autostart:!1,onStartCallback:function(searchManager){vizQuerySearch=DrilldownLinker.createSearch(sharedSearchArray,self.model.searchInfo.get("baseTimerange")),DrilldownLinker.setSearchDrilldown(fitModelSummaryPanel.title,vizQuerySearch)}})}(),function(){var sharedSearchArray=["| summary $modelNameToken|s$"],vizQuerySearch=null;decisionTreeVizPanel.openInSearchButton.on("click",function(){window.open(DrilldownLinker.getUrl("search",vizQuerySearch),"_blank")}),decisionTreeVizPanel.showSPLButton.on("click",function(){(0,_SearchStringDisplay.showSearchStringModal)("decisionTreeSummaryVizSearchStringDisplayModal","Inspect the model coefficients",sharedSearchArray,["load the model coefficients"])}),Searches.setSearch("decisionTreeSummaryVizSearch",{searchString:sharedSearchArray,autostart:!1,onStartCallback:function(searchManager){vizQuerySearch=DrilldownLinker.createSearch(sharedSearchArray,self.model.searchInfo.get("baseTimerange")),DrilldownLinker.setSearchDrilldown(decisionTreeVizPanel.title,vizQuerySearch)}})}(),function(){var sharedSearchString="| `regressionstatistics($regressionTargetToken|s$, $regressionPredictionToken|s$)`",vizQueryArray=[],vizQuerySearch=null;regressionStatisticsPanel.openInSearchButton.on("click",function(){window.open(DrilldownLinker.getUrl("search",vizQuerySearch),"_blank")}),regressionStatisticsPanel.showSPLButton.on("click",function(){(0,_SearchStringDisplay.showSearchStringModal)("regressionstatisticsSearchStringDisplayModal","Compute R² and root mean squared error (RMSE)",vizQueryArray,[null].concat(getApplyCommentsArray(),["use the `regressionstatistics` macro to compute R² and RMSE"]),self.model.searchInfo.get("baseTimerange"))}),Searches.setSearch("regressionstatisticsSearch",{searchString:(0,_compactTemplateString2["default"])(_templateObject13,sharedSearchString),autostart:!1,onStartCallback:function(){Spinners.showLoadingOverlay(regressionStatisticsPanel.spinnerAnchor),vizQueryArray=[self.model.searchInfo.get("baseSearchString")].concat(getApplyArray(),[sharedSearchString]),vizQuerySearch=DrilldownLinker.createSearch(vizQueryArray,self.model.searchInfo.get("baseTimerange")),DrilldownLinker.setSearchDrilldown(r2StatisticPanel.title,vizQuerySearch),DrilldownLinker.setSearchDrilldown(rootMeanSquaredErrorStatisticPanel.title,vizQuerySearch)},onDataCallback:function(data){var testingSearchId=Searches.getSid(Searches.getSearchManager("testingSearch"));historySerializer.persist(testingSearchId,{r_squared:parseFloat((0,_getFieldFromData2["default"])(data,"rSquared")),rmse:parseFloat((0,_getFieldFromData2["default"])(data,"RMSE"))})},onFinallyCallback:function(){Spinners.hideLoadingOverlay(regressionStatisticsPanel.spinnerAnchor)}})}(),this.sampleSearchDeferred.done(setCurrentSampleSearch),setTimeout(updateForm,0),this},controlsTemplate:'\n        <div class="mlts-input">\n            <label>Algorithm</label>\n            <div id="regressionAlgorithmControl"></div>\n        </div>\n        <div class="mlts-input">\n            <label>Field to predict</label>\n            <div id="targetVariableControl"></div>\n        </div>\n        <div class="mlts-input">\n            <label>Fields to use for predicting</label>\n            <div id="featuresVariableControl"></div>\n        </div>\n        <div class="mlts-input">\n          <label>Split for training / test: <span id="trainingSetFractionSliderValue"></span></label>\n          <div id="trainingSetFractionSlider">\n          </div>\n        </div>\n        <div id="regressionAlgorithmParamsControlsWrapper"></div>\n        <div class="mlts-input">\n          <label>Save the model as</label>\n          <div id="modelNameInputControl"></div>\n        </div>\n    ',template:'\n        <div class="mlts-row mlts-results-row">\n            <div class="mlts-cell">\n                <div class="mlts-panel" id="dataAndPredictionsPanel"></div>\n            </div>\n        </div>\n\n        <div class="mlts-row mlts-results-row">\n            <div class="mlts-cell">\n                 <div class="mlts-panel" id="actualVsPredictedLinesPanel">\n                 </div>\n            </div>\n            <div class="mlts-cell">\n                 <div class="mlts-panel" id="actualVsPredictedScatterLinePanel">\n                 </div>\n            </div>\n        </div>\n\n        <div class="mlts-row mlts-results-row">\n            <div class="mlts-cell">\n                 <div class="mlts-panel" id="residualsLinePanel">\n                 </div>\n            </div>\n            <div class="mlts-cell">\n                 <div class="mlts-panel" id="residualsHistogramPanel">\n                 </div>\n            </div>\n        </div>\n        <div class="mlts-row mlts-results-row">\n            <div class="mlts-cell">\n                <div class="mlts-panel" id="regressionStatisticsPanel">\n                    <div class="mlts-stats-panel">\n                        <div id="r2StatisticPanel"></div>\n                        <div id="rootMeanSquaredErrorStatisticPanel"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="mlts-cell">\n                 <div class="mlts-panel" id="fitModelSummaryPanel">\n                 </div>\n            </div>\n            <div class="mlts-cell">\n                 <div class="mlts-panel" id="decisionTreeVizPanel">\n                 </div>\n            </div>\n        </div>\n\n        '}),linearRegressionView=new LinearRegressionView;linearRegressionView.deferreds.viewReady.done(function(layout){layout.getContainerElement().appendChild(linearRegressionView.render().el)})}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__),!(void 0!==__WEBPACK_AMD_DEFINE_RESULT__&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__))}]);