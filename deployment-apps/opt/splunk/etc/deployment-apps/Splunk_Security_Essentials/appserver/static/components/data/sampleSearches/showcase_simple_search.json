{
    "Send ES Notable Events": {
      "value": "earliest=-5m@min latest=@min `notable`| search user=* OR src=* ",
      "label": "Send ES Notable Events",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have notable events with the notable macro",
         "test": "earliest=-24h latest=now `notable` | stats count ",
         "resolution": "In order to run this search, you must have results from the `notable` macro, which means running on an ES search head.",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },
    "Series of Hacker Filenames - Demo": {
      "value": "| inputlookup generic_sysmon_process_launch_logs.csv  |search [|inputlookup tools.csv | search discovery_or_attack=attack | eval filename=\"Image=\\\"*\\\\\\\\\" . filename . \"\\\"\" | stats values(filename) as search | eval search=mvjoin(search, \" OR \")] | transaction host maxpause=5m | where eventcount>=4| fields - _raw closed_txn field_match_sum linecount",
      "label": "Series of Hacker Filenames - Demo",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Demo Lookup",
         "test": "| rest splunk_server=local /servicesNS/-/-/data//lookup-table-files | eval blah=1, row=\"row\"| xyseries row title blah ",
         "resolution": "Verify that lookups installed with Splunk Security Essentials is present",
          "field": "generic_sysmon_service_launch_logs.csv",
          "greaterorequalto": 1}
      ]
    },
    "Series of Hacker Hashes - Demo": {
      "value": "| inputlookup generic_sysmon_process_launch_logs.csv  |search [|inputlookup tools.csv | search discovery_or_attack=attack | eval hash=\"sha1=\" . hash | stats values(hash) as search | eval search=mvjoin(search, \" OR \")] | transaction host maxpause=5m | where eventcount>=4 | fields - _raw closed_txn field_match_sum linecount",
      "label": "Series of Hacker Hashes - Demo",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Demo Lookup",
         "test": "| rest splunk_server=local /servicesNS/-/-/data//lookup-table-files | eval blah=1, row=\"row\"| xyseries row title blah ",
         "resolution": "Verify that lookups installed with Splunk Security Essentials is present",
          "field": "generic_sysmon_service_launch_logs.csv",
          "greaterorequalto": 1}
      ]
    },
    "Series of Hacker Filenames - Live": {
      "value": "index=* sourcetype=\"WinEventLog:Security\" EventCode=4688 [|inputlookup tools.csv | search discovery_or_attack=attack | stats values(filename) as search | eval search=mvjoin(search, \" OR \")] | transaction host maxpause=5m | where eventcount>=4| fields - _raw closed_txn field_match_sum linecount",
      "label": "Series of Hacker Filenames - Live",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Windows Security Logs",
         "test": "| metasearch index=* earliest=-2h latest=now sourcetype=Win*Security | stats count ",
         "resolution": "Begin ingesting Windows Security Logs",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Must have Process Launch Logs (Event ID 4688)",
         "test": "earliest=-2h latest=now index=* sourcetype=Win*Security EventCode=4688 | head 100 | stats count ",
         "resolution": "Turn on Process Tracking in your Windows Audit logs (<a href=\"https://technet.microsoft.com/en-us/library/cc976411.aspx\">docs</a>)",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },
    "Series of Hacker Hashes - Live": {
      "value": "index=* sourcetype=\"xmlwineventlog:microsoft-windows-sysmon/operational\" EventCode=1  [|inputlookup tools.csv | search discovery_or_attack=attack | stats values(hash) as search | eval search=mvjoin(search, \" OR \")] | transaction host maxpause=5m | where eventcount>=4 | fields - _raw closed_txn field_match_sum linecount",
      "label": "Series of Hacker Hashes - Live",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Microsoft sysmon logs",
         "test": "| metasearch index=* sourcetype=\"xmlwineventlog:microsoft-windows-sysmon/operational\"  earliest=-1h latest=now  | stats count ",
         "resolution": "Sysmon is a free Microsoft tool that provides all kinds of great value. Consider pulling the data in via our <a href=\"https://splunkbase.splunk.com/app/1914/\">Splunk App</a>. Check out the <a href=\"http://conf.splunk.com/files/2016/slides/splunking-the-endpoint-hands-on.pdf\">Splunking the Endpoint</a> .conf presentation to see what you can do with this data!",
          "field": "count",
          "greaterorequalto": 1}
        ]
    },
    "Series of Discovery Filenames - Demo": {
      "value": "| inputlookup generic_sysmon_process_launch_logs.csv  |search [|inputlookup tools.csv | search discovery_or_attack=discovery | eval filename=\"Image=\\\"*\\\\\\\\\" . filename . \"\\\"\" | stats values(filename) as search | eval search=mvjoin(search, \" OR \")] | transaction host maxpause=5m | where mvcount(Image)>=6| fields - _raw closed_txn field_match_sum linecount",
      "label": "Series of Discovery Filenames - Demo",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Demo Lookup",
         "test": "| rest splunk_server=local /servicesNS/-/-/data//lookup-table-files | eval blah=1, row=\"row\"| xyseries row title blah ",
         "resolution": "Verify that lookups installed with Splunk Security Essentials is present",
          "field": "generic_sysmon_service_launch_logs.csv",
          "greaterorequalto": 1}
      ]
    },
    "Series of Discovery Hashes - Demo": {
      "value": "| inputlookup generic_sysmon_process_launch_logs.csv  |search [|inputlookup tools.csv | search discovery_or_attack=discovery | eval hash=\"sha1=\" . hash | stats values(hash) as search | eval search=mvjoin(search, \" OR \")] | transaction host maxpause=5m | where mvcount(Image)>=6 | fields - _raw closed_txn field_match_sum linecount",
      "label": "Series of Discovery Hashes - Demo",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Demo Lookup",
         "test": "| rest splunk_server=local /servicesNS/-/-/data//lookup-table-files | eval blah=1, row=\"row\"| xyseries row title blah ",
         "resolution": "Verify that lookups installed with Splunk Security Essentials is present",
          "field": "generic_sysmon_service_launch_logs.csv",
          "greaterorequalto": 1}
      ]
    },
    "Series of Discovery Filenames - Live": {
      "value": "index=* sourcetype=\"WinEventLog:Security\" EventCode=4688 [|inputlookup tools.csv | search discovery_or_attack=discovery | stats values(filename) as search | eval search=mvjoin(search, \" OR \")] | transaction host maxpause=5m | where mvcount(Image)>=6| fields - _raw closed_txn field_match_sum linecount",
      "label": "Series of Discovery Filenames - Live",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Windows Security Logs",
         "test": "| metasearch index=* earliest=-2h latest=now sourcetype=Win*Security | stats count ",
         "resolution": "Begin ingesting Windows Security Logs",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Must have Process Launch Logs (Event ID 4688)",
         "test": "earliest=-2h latest=now index=* sourcetype=Win*Security EventCode=4688 | head 100 | stats count ",
         "resolution": "Turn on Process Tracking in your Windows Audit logs (<a href=\"https://technet.microsoft.com/en-us/library/cc976411.aspx\">docs</a>)",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },
    "Series of Discovery Hashes - Live": {
      "value": "index=* sourcetype=\"xmlwineventlog:microsoft-windows-sysmon/operational\" EventCode=1  [|inputlookup tools.csv | search discovery_or_attack=discovery | stats values(hash) as search | eval search=mvjoin(search, \" OR \")] | transaction host maxpause=5m | where mvcount(Image)>=6 | fields - _raw closed_txn field_match_sum linecount",
      "label": "Series of Discovery Hashes - Live",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Microsoft sysmon logs",
         "test": "| metasearch index=* sourcetype=\"xmlwineventlog:microsoft-windows-sysmon/operational\"  earliest=-1h latest=now  | stats count ",
         "resolution": "Sysmon is a free Microsoft tool that provides all kinds of great value. Consider pulling the data in via our <a href=\"https://splunkbase.splunk.com/app/1914/\">Splunk App</a>. Check out the <a href=\"http://conf.splunk.com/files/2016/slides/splunking-the-endpoint-hands-on.pdf\">Splunking the Endpoint</a> .conf presentation to see what you can do with this data!",
          "field": "count",
          "greaterorequalto": 1}
        ]
    },
    "Find Unusually Long CLI Commands - Demo": {
      "value": "| inputlookup STE_Sysmon_commandline.csv |  eval cmdlen=len(CommandLine) | eventstats stdev(cmdlen) as stdev,avg(cmdlen) as avg by host| stats max(cmdlen) as maxlen, values(stdev) as stdevperhost, values(avg) as avgperhost by host,CommandLine | where maxlen>4*stdevperhost+avgperhost",
      "label": "Find Unusually Long CLI Commands - Demo",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Demo Lookup",
         "test": "| rest splunk_server=local /servicesNS/-/-/data//lookup-table-files | eval blah=1, row=\"row\"| xyseries row title blah ",
         "resolution": "Verify that lookups installed with Splunk Security Essentials is present",
          "field": "STE_Sysmon_commandline.csv",
          "greaterorequalto": 1}
      ]
    },
    "Find Unusually Long CLI Commands - Live": {
      "value": "index=* sourcetype=\"xmlwineventlog:microsoft-windows-sysmon/operational\" EventCode=1  |eval cmdlen=len(CommandLine) | eventstats stdev(cmdlen) as stdev,avg(cmdlen) as avg by host| stats max(cmdlen) as maxlen, values(stdev) as stdevperhost, values(avg) as avgperhost by host,CommandLine | where maxlen>4*stdevperhost+avgperhost",
      "label": "Find Unusually Long CLI Commands - Live",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Microsoft sysmon logs",
         "test": "| metasearch index=* sourcetype=\"xmlwineventlog:microsoft-windows-sysmon/operational\"  earliest=-1h latest=now  | stats count ",
         "resolution": "Sysmon is a free Microsoft tool that provides all kinds of great value. Consider pulling the data in via our <a href=\"https://splunkbase.splunk.com/app/1914/\">Splunk App</a>. Check out the <a href=\"http://conf.splunk.com/files/2016/slides/splunking-the-endpoint-hands-on.pdf\">Splunking the Endpoint</a> .conf presentation to see what you can do with this data!",
          "field": "count",
          "greaterorequalto": 1}
        ]
    },
    "Find Processes with Renamed Executables - Demo": {
      "value": "| inputlookup generic_sysmon_process_launch_logs.csv | rex field=Image \"[\\\\\\/](?<filename>[^\\\\\\/]*)$\" | eval filename=lower(filename)| stats dc(filename) as NumFilenames values(filename) as Filenames values(Image) as Images by sha1 | where NumFilenames>1",
      "label": "Find Processes with Renamed Executables - Demo",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Demo Lookup",
         "test": "| rest splunk_server=local /servicesNS/-/-/data//lookup-table-files | eval blah=1, row=\"row\"| xyseries row title blah ",
         "resolution": "Verify that lookups installed with Splunk Security Essentials is present",
          "field": "generic_sysmon_service_launch_logs.csv",
          "greaterorequalto": 1}
      ]
    },    
    "Find Processes with Renamed Executables - Live": {
      "value": "index=* sourcetype=\"xmlwineventlog:microsoft-windows-sysmon/operational\" EventCode=1 | rex field=Image \"[\\\\\\/](?<filename>[^\\\\\\/]*)$\" | eval filename=lower(filename)| stats dc(filename) as NumFilenames values(filename) as Filenames values(Image) as Images by sha1 | where NumFilenames>1",
      "label": "Find Processes with Renamed Executables - Live",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Microsoft sysmon logs",
         "test": "| metasearch index=* sourcetype=\"xmlwineventlog:microsoft-windows-sysmon/operational\"  earliest=-1h latest=now  | stats count ",
         "resolution": "Sysmon is a free Microsoft tool that provides all kinds of great value. Consider pulling the data in via our <a href=\"https://splunkbase.splunk.com/app/1914/\">Splunk App</a>. Check out the <a href=\"http://conf.splunk.com/files/2016/slides/splunking-the-endpoint-hands-on.pdf\">Splunking the Endpoint</a> .conf presentation to see what you can do with this data!",
          "field": "count",
          "greaterorequalto": 1}
        ]
    },    
    "Processes With High Entropy Names in Users Directory - Demo": {
      "value": "| inputlookup STE_Win4688.csv | search New_Process_Name=*\\Users\\*| lookup ut_shannon_lookup word as New_Process_Name | stats  values(ut_shannon)  as \"Shannon Entropy Score\" by New_Process_Name,host | rename  New_Process_Name as Process,host as Endpoint ",
      "label": "Processes With High Entropy Names in Users Directory - Demo",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Demo Lookup",
         "test": "| rest splunk_server=local /servicesNS/-/-/data//lookup-table-files | eval blah=1, row=\"row\"| xyseries row title blah ",
         "resolution": "Verify that lookups installed with Splunk Security Essentials is present",
          "field": "STE_Win4688.csv",
          "greaterorequalto": 1},
        {"name": "Must have URL Toolbox Installed (provides Shannon entropy checking)",
         "test": "| rest /services/apps/local | search disabled=0 label=\"URL Toolbox\" | stats count",
         "resolution": "The URL Toolbox app, written by Cedric Le Roux, not only provides effective URL Parsing but also Levenshtein similarity checking (e.g., typo detection) and Shannon entropy detection. Download <a href=\"https://splunkbase.splunk.com/app/2734/\">here</a>.",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },
    "Huge Volume of DNS Traffic - Demo":{
      "value": "| inputlookup dns_data_anon.csv | convert mktime(_time) timeformat=\"%Y-%m-%dT%H:%M:%S.%3Q%z\" | bucket _time span=1h | stats sum(bytes*) as bytes* by src_ip _time | eventstats max(_time) as maxtime avg(bytes_out) as avg_bytes_out stdev(bytes_out) as stdev_bytes_out | eventstats count as num_data_samples avg(eval(if(_time < relative_time(maxtime, \"@h\"),bytes_out,null))) as per_source_avg_bytes_out stdev(eval(if(_time < relative_time(maxtime, \"@h\"),bytes_out,null))) as per_source_stdev_bytes_out by src_ip  | where num_data_samples >=4 AND bytes_out > avg_bytes_out + 3 * stdev_bytes_out AND bytes_out > per_source_avg_bytes_out + 3 * per_source_stdev_bytes_out AND _time >= relative_time(maxtime, \"@h\") | eval num_standard_deviations_away_from_org_average = round(abs(bytes_out - avg_bytes_out) / stdev_bytes_out,2), num_standard_deviations_away_from_per_source_average = round(abs(bytes_out - per_source_avg_bytes_out) / per_source_stdev_bytes_out,2) | fields - maxtime per_source* avg* stdev*",
      "label": "Huge Volume of DNS Traffic - Demo",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Demo Lookup",
         "test": "| rest splunk_server=local /servicesNS/-/-/data//lookup-table-files | eval blah=1, row=\"row\"| xyseries row title blah ",
         "resolution": "Verify that lookups installed with Splunk Security Essentials is present",
          "field": "dns_data_anon.csv",
          "greaterorequalto": 1}
      ]

    },
    "Huge Volume of DNS Traffic - Live":{
      "value": "(tag=network tag=communicate) OR (index=pan_logs sourcetype=pan*traffic) OR (index=* sourcetype=opsec) OR (index=* sourcetype=cisco:asa)  | bucket _time span=1h | stats sum(bytes*) as bytes* by src_ip _time | eventstats max(_time) as maxtime avg(bytes_out) as avg_bytes_out stdev(bytes_out) as stdev_bytes_out | eventstats count as num_data_samples avg(eval(if(_time < relative_time(maxtime, \"@h\"),bytes_out,null))) as per_source_avg_bytes_out stdev(eval(if(_time < relative_time(maxtime, \"@h\"),bytes_out,null))) as per_source_stdev_bytes_out by src_ip  | where num_data_samples >=4 AND bytes_out > avg_bytes_out + 3 * stdev_bytes_out AND bytes_out > per_source_avg_bytes_out + 3 * per_source_stdev_bytes_out AND _time >= relative_time(maxtime, \"@h\") | eval num_standard_deviations_away_from_org_average = round(abs(bytes_out - avg_bytes_out) / stdev_bytes_out,2), num_standard_deviations_away_from_per_source_average = round(abs(bytes_out - per_source_avg_bytes_out) / per_source_stdev_bytes_out,2) | fields - maxtime per_source* avg* stdev*",
      "label": "Huge Volume of DNS Traffic - Live",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Firewall data",
         "test": "(tag=network tag=communicate) OR (index=pan_logs sourcetype=pan*traffic) OR (index=* sourcetype=opsec) OR (index=* sourcetype=cisco:asa)| head 100 | stats count ",
         "resolution": "This search requires Firewall or Netflow data to run. By default, we're checking for Common Information Model compliant data, and then also manually specifying the standard sourcetypes for Check Point, Palo Alto Networks, and Cisco ASAs. You should specify your particular index and sourcetype in the actual search to improve performance (or better yet, accelerate with the common information model!)",
          "field": "count",
          "greaterorequalto": 1},
          {"name": "Must have a src_ip and bytes_out field",
         "test": "((tag=network tag=communicate) OR (index=pan_logs sourcetype=pan*traffic) OR (index=* sourcetype=opsec) OR (index=* sourcetype=cisco:asa)) src_ip=* bytes_out>0| head 100 | stats count ",
         "resolution": "This search is also looking for firewall logs, but with the added filter of making sure that a src_ip defined and bytes_out>0.",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },
    "Huge Volume of DNS Traffic - Accelerated":{
      "value": "| tstats summariesonly=t allow_old_summaries=t sum(All_Traffic.bytes_out) as count from datamodel=Network_Traffic where All_Traffic.dest_port=53 by All_Traffic.src_ip _time span=1d | eventstats max(_time) as maxtime avg(bytes_out) as avg_bytes_out stdev(bytes_out) as stdev_bytes_out | eventstats count as num_data_samples avg(eval(if(_time < relative_time(maxtime, \"@h\"),bytes_out,null))) as per_source_avg_bytes_out stdev(eval(if(_time < relative_time(maxtime, \"@h\"),bytes_out,null))) as per_source_stdev_bytes_out by src_ip  | where num_data_samples >=4 AND bytes_out > avg_bytes_out + 3 * stdev_bytes_out AND bytes_out > per_source_avg_bytes_out + 3 * per_source_stdev_bytes_out AND _time >= relative_time(maxtime, \"@h\") | eval num_standard_deviations_away_from_org_average = round(abs(bytes_out - avg_bytes_out) / stdev_bytes_out,2), num_standard_deviations_away_from_per_source_average = round(abs(bytes_out - per_source_avg_bytes_out) / per_source_stdev_bytes_out,2) | fields - maxtime per_source* avg* stdev*",
      "label": "Huge Volume of DNS Traffic - Accelerated",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have a Network Traffic data model",
         "test": "| tstats count from datamodel=Network_Traffic where earliest=-1h ",
         "resolution": "This search requires Firewall or Netflow data to run. We are searching here for the common information model network traffic data model.",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Must have an accelerated Network Traffic data model",
         "test": "| tstats summariesonly=t allow_old_summaries=t count from datamodel=Network_Traffic where earliest=-1h ",
         "resolution": "In addition to searching for the common information model network traffic data model, we are telling Splunk to only visit accelerated data models.",
          "field": "count",
          "greaterorequalto": 1},
          {"name": "Network Traffic data model must have a src_ip and bytes_out",
         "test": "| tstats summariesonly=t allow_old_summaries=t sum(All_Traffic.bytes_out) as bytes dc(All_Traffic.src_ip) as src from datamodel=Network_Traffic where earliest=-1h | eval count = bytes * src",
         "resolution": "In addition to searching for the accelerated common information model network traffic data model, we are telling Splunk to verify that there is a src_ip, and that bytes_out is greater than zero bytes in this data set.",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },
    "Huge Volume of DNS Requests - Demo":{
      "value": "| inputlookup dns_data_anon.csv | convert mktime(_time) timeformat=\"%Y-%m-%dT%H:%M:%S.%3Q%z\" | bucket _time span=1h | stats count by src_ip _time | eventstats max(_time) as maxtime avg(count) as avg_count stdev(count) as stdev_count | eventstats count as num_data_samples avg(eval(if(_time < relative_time(maxtime, \"@h\"),count,null))) as per_source_avg_count stdev(eval(if(_time < relative_time(maxtime, \"@h\"),count,null))) as per_source_stdev_count by src_ip  | where num_data_samples >=4 AND count > avg_count + 3 * stdev_count AND count > per_source_avg_count + 3 * per_source_stdev_count AND _time >= relative_time(maxtime, \"@h\") | eval num_standard_deviations_away_from_org_average = round(abs(count - avg_count) / stdev_count,2), num_standard_deviations_away_from_per_source_average = round(abs(count - per_source_avg_count) / per_source_stdev_count,2) | fields - maxtime per_source* avg* stdev*",
      "label": "Huge Volume of DNS Requests - Demo",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Demo Lookup",
         "test": "| rest splunk_server=local /servicesNS/-/-/data//lookup-table-files | eval blah=1, row=\"row\"| xyseries row title blah ",
         "resolution": "Verify that lookups installed with Splunk Security Essentials is present",
          "field": "dns_data_anon.csv",
          "greaterorequalto": 1}
      ]
    },
    "Huge Volume of DNS Requests - Live":{
      "value": "(tag=network tag=communicate) OR (index=pan_logs sourcetype=pan*traffic) OR (index=* sourcetype=opsec) OR (index=* sourcetype=cisco:asa)  | bucket _time span=1h | stats count by src_ip _time | eventstats max(_time) as maxtime avg(count) as avg_count stdev(count) as stdev_count | eventstats count as num_data_samples avg(eval(if(_time < relative_time(maxtime, \"@h\"),count,null))) as per_source_avg_count stdev(eval(if(_time < relative_time(maxtime, \"@h\"),count,null))) as per_source_stdev_count by src_ip  | where num_data_samples >=4 AND count > avg_count + 3 * stdev_count AND count > per_source_avg_count + 3 * per_source_stdev_count AND _time >= relative_time(maxtime, \"@h\") | eval num_standard_deviations_away_from_org_average = round(abs(count - avg_count) / stdev_count,2), num_standard_deviations_away_from_per_source_average = round(abs(count - per_source_avg_count) / per_source_stdev_count,2) | fields - maxtime per_source* avg* stdev*",
      "label": "Huge Volume of DNS Requests - Live",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Firewall data",
         "test": "(tag=network tag=communicate) OR (index=pan_logs sourcetype=pan*traffic) OR (index=* sourcetype=opsec) OR (index=* sourcetype=cisco:asa)| head 100 | stats count ",
         "resolution": "This search requires Firewall or Netflow data to run. By default, we're checking for Common Information Model compliant data, and then also manually specifying the standard sourcetypes for Check Point, Palo Alto Networks, and Cisco ASAs. You should specify your particular index and sourcetype in the actual search to improve performance (or better yet, accelerate with the common information model!)",
          "field": "count",
          "greaterorequalto": 1},
          {"name": "Must have a src_ip and bytes_out field",
         "test": "((tag=network tag=communicate) OR (index=pan_logs sourcetype=pan*traffic) OR (index=* sourcetype=opsec) OR (index=* sourcetype=cisco:asa)) src_ip=* bytes_out>0| head 100 | stats count ",
         "resolution": "This search is also looking for firewall logs, but with the added filter of making sure that a src_ip defined and bytes_out>0.",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },
    "Huge Volume of DNS Requests - Accelerated":{
      "value": "| tstats summariesonly=t allow_old_summaries=t count from datamodel=Network_Traffic where All_Traffic.dest_port=53 by All_Traffic.src_ip _time span=1d | eventstats max(_time) as maxtime avg(count) as avg_count stdev(count) as stdev_count | eventstats count as num_data_samples avg(eval(if(_time < relative_time(maxtime, \"@h\"),count,null))) as per_source_avg_count stdev(eval(if(_time < relative_time(maxtime, \"@h\"),count,null))) as per_source_stdev_count by src_ip  | where num_data_samples >=4 AND count > avg_count + 3 * stdev_count AND count > per_source_avg_count + 3 * per_source_stdev_count AND _time >= relative_time(maxtime, \"@h\") | eval num_standard_deviations_away_from_org_average = round(abs(count - avg_count) / stdev_count,2), num_standard_deviations_away_from_per_source_average = round(abs(count - per_source_avg_count) / per_source_stdev_count,2) | fields - maxtime per_source* avg* stdev*",
      "label": "Huge Volume of DNS Requests - Accelerated",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have data in your Network Traffic data model",
         "test": "| tstats count from datamodel=Network_Traffic where earliest=-1h ",
         "resolution": "This search requires Firewall or Netflow data to run. We are searching here for the common information model network traffic data model.",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Must have an accelerated Network Traffic data model",
         "test": "| tstats summariesonly=t allow_old_summaries=t count from datamodel=Network_Traffic where earliest=-1h ",
         "resolution": "In addition to searching for the common information model network traffic data model, we are telling Splunk to only visit accelerated data models.",
          "field": "count",
          "greaterorequalto": 1},
          {"name": "Network Traffic data model must have a src_ip",
         "test": "| tstats summariesonly=t allow_old_summaries=t dc(All_Traffic.src_ip) as count from datamodel=Network_Traffic where earliest=-1h ",
         "resolution": "In addition to searching for the accelerated common information model network traffic data model, we are telling Splunk to verify that there is a src_ip in this data set.",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },
    "Systems with Timestamps Far Into the Future - Live":{
      "value": "| tstats count where index=* _index_earliest=-30m earliest=-30m latest=+21y groupby host _time span=10m | stats range(_time) as time_range by host | where time_range>3600 | eval month=now() | bucket month span=1mon | convert ctime(month)",
      "label": "Systems with Timestamps Far Into the Future - Live",
      "actions_UBASeverity": 7
    },
    "Processes With High Entropy Names in Users Directory - Live": {
      "value": "index=* sourcetype=\"WinEventLog:Security\" EventCode=4688 New_Process_Name=C:\\\\Users*| lookup ut_shannon_lookup word as New_Process_Name | stats  values(ut_shannon)  as \"Shannon Entropy Score\" by New_Process_Name,host | rename  New_Process_Name as Process,host as Endpoint  | sort  -\"Shannon Entropy Score\"",
      "label": "Processes With High Entropy Names in Users Directory - Live",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Windows Security Logs",
         "test": "| metasearch index=* earliest=-2h latest=now sourcetype=Win*Security | stats count ",
         "resolution": "Begin ingesting Windows Security Logs",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Must have Process Launch Logs (Event ID 4688)",
         "test": "earliest=-2h latest=now index=* sourcetype=Win*Security EventCode=4688 | head 100 | stats count ",
         "resolution": "Turn on Process Tracking in your Windows Audit logs (<a href=\"https://technet.microsoft.com/en-us/library/cc976411.aspx\">docs</a>)",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Must have URL Toolbox Installed (provides Shannon Entropy Checking)",
         "test": "| rest /services/apps/local | search disabled=0 label=\"URL Toolbox\" | stats count",
         "resolution": "Splunk's URL Toolbox app, written by Cedric Le Roux, not only provides effective URL Parsing but also Levenshtein similarity checking (e.g., typo detection) and Shannon Entropy Detection. Download <a href=\"https://splunkbase.splunk.com/app/2734/\">here</a>.",
          "field": "count",
          "greaterorequalto": 1}
      ]
    }, 
    "Short Lived Accounts - Demo": {
      "value": "|inputlookup Local_Short_Lived_Account.csv  | rex mode=sed field=Account_Name \"s/\\n/;/g\" | makemv Account_Name delim=\";\"  | search  EventCode=4726 OR EventCode=4720 | transaction Target_Account_Name maxspan=180m | search EventCode=4720 EventCode=4726| table _time EventCode Account_Name Target_Account_Name Message",
      "label": "Short Lived Accounts - Demo",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Demo Lookup",
         "test": "| rest splunk_server=local /servicesNS/-/-/data//lookup-table-files | eval blah=1, row=\"row\"| xyseries row title blah ",
         "resolution": "Verify that lookups installed with Splunk Security Essentials is present",
          "field": "Local_Short_Lived_Account.csv",
          "greaterorequalto": 1}
      ]
    },
    "Short Lived Accounts - Live": {
      "value": "index=* sourcetype=\"WinEventLog:Security\"   EventCode=4726 OR EventCode=4720 | eval Account_Name=mvindex(Account_Name,1) | transaction Account_Name maxspan=180m startswith=\"EventCode=4726\" endswith=\"EventCode=4720\"| table _time EventCode Account_Name Message",
      "label": "Short Lived Accounts - Live",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Windows Security Logs",
         "test": "| metasearch index=* earliest=-2h latest=now sourcetype=Win*Security | stats count ",
         "resolution": "Begin ingesting Windows Security Logs",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Must have Local Account Management Logs (Event ID 4720 and 4726)",
         "test": "| metasearch earliest=-30d latest=now index=* sourcetype=\"WinEventLog:Security\" TERM(eventcode=4726) OR TERM(eventcode=4720) | head | stats count ",
         "resolution": "Turn on Group Management Audit Logs in your Local Windows Security Policy (<a href=\"http://whatevernetworks.com/?p=21\">docs</a>)",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },  
    
    "Suspicious Timestamp Manipulation - Demo": {
      "value": "|inputlookup Sysmon_Timestamp_Adjustment_STE.csv | eval timediff = strptime(PreviousCreationUtcTime, \"%Y-%m-%d %H:%M:%S.%3Q\") - strptime(CreationUtcTime, \"%Y-%m-%d %H:%M:%S.%3Q\") | where isnull(timediff) OR timediff>3600",
      "label": "Suspicious Timestamp Manipulation - Demo",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Demo Lookup",
         "test": "| rest splunk_server=local /servicesNS/-/-/data//lookup-table-files | eval blah=1, row=\"row\"| xyseries row title blah ",
         "resolution": "Verify that lookups installed with Splunk Security Essentials is present",
          "field": "Sysmon_Timestamp_Adjustment_STE.csv",
          "greaterorequalto": 1}
      ]
    },
    "Suspicious Timestamp Manipulation - Live": {
      "value": "index=* sourcetype=\"XmlWinEventLog:Microsoft-Windows-Sysmon/Operational\" EventCode=2 | eval timediff = strptime(PreviousCreationUtcTime, \"%Y-%m-%d %H:%M:%S.%3Q\") - strptime(CreationUtcTime, \"%Y-%m-%d %H:%M:%S.%3Q\") | where isnull(timediff) OR timediff>3600 | table _time Computer Image ProcessId TargetFilename CreationUtcTime PreviousCreationUtcTime timediff",
      "label": "Suspicious Timestamp Manipulation - Live",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Microsoft sysmon logs",
         "test": "| metasearch index=* sourcetype=\"xmlwineventlog:microsoft-windows-sysmon/operational\"  earliest=-1h latest=now  | stats count ",
         "resolution": "Sysmon is a free Microsoft tool that provides all kinds of great value. Consider pulling the data in via our <a href=\"https://splunkbase.splunk.com/app/1914/\">Splunk App</a>. Check out the <a href=\"http://conf.splunk.com/files/2016/slides/splunking-the-endpoint-hands-on.pdf\">Splunking the Endpoint</a> .conf presentation to see what you can do with this data!",
          "field": "count",
          "greaterorequalto": 1}
        ]
    },
    "Short Lived Accounts - Accelerated": {
      "value": "| tstats summariesonly=t allow_old_summaries=t count from datamodel=Change_Analysis where All_Changes.result_id=4720 OR All_Changes.result_id=4726 by All_Changes.result_id All_Changes.user All_Changes.dest _time | rename All_Changes.* as *  | transaction user maxspan=180m  | search result_id=4720 result_id=4726",
      "label": "Short Lived Accounts - Accelerated",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have an accelerated Change Analysis data model",
         "test": "| tstats summariesonly=t allow_old_summaries=t count from datamodel=Change_Analysis where earliest=-2d",
         "resolution": "Begin ingesting Windows Security Logs",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Change Analysis data model must have Local Account Management Logs (Event ID 4720 and 4726)",
         "test": "| tstats summariesonly=t allow_old_summaries=t count from datamodel=Change_Analysis where earliest=-30d (All_Changes.result_id=4720 OR All_Changes.result_id=4726) ",
         "resolution": "Turn on Group Management Audit Logs in your Local Windows Security Policy (<a href=\"http://whatevernetworks.com/?p=21\">docs</a>)",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },
    "New Local Admin - Demo": {
      "value": "|inputlookup Local_Short_Lived_Account.csv  | rex mode=sed field=Security_ID \"s/\\n/;/g\" | makemv Security_ID delim=\";\"| makemv Account_Name delim=\";\" | search EventCode=4720 OR (EventCode=4732 Administrators) | transaction Security_ID maxspan=180m | table _time EventCode Security_ID Group_Name Account_Name Message ",
      "label": "New Local Admin - Demo",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Demo Lookup",
         "test": "| rest splunk_server=local /servicesNS/-/-/data//lookup-table-files | eval blah=1, row=\"row\"| xyseries row title blah ",
         "resolution": "Verify that lookups installed with Splunk Security Essentials is present",
          "field": "Local_Short_Lived_Account.csv",
          "greaterorequalto": 1}
      ]
    },
    "New Local Admin - Live": {
      "value": "index=* sourcetype=\"WinEventLog:Security\" EventCode=4720 OR (EventCode=4732 Administrators) | transaction Security_ID maxspan=180m | search EventCode=4720 (EventCode=4732 Administrators) | table _time EventCode Account_Name Target_Account_Name Message",
      "label": "New Local Admin - Live",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Windows Security Logs",
         "test": "| metasearch index=* earliest=-2h latest=now sourcetype=Win*Security | stats count ",
         "resolution": "Begin ingesting Windows Security Logs",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Must have Local Account Management Logs (Event ID 4720)",
         "test": "| metasearch earliest=-30d latest=now index=* sourcetype=\"WinEventLog:Security\" TERM(eventcode=4726) | head | stats count ",
         "resolution": "Turn on Account Management Audit Logs in your Local Windows Security Policy (<a href=\"http://www.thewindowsclub.com/track-user-activity-windows\">docs</a>)",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Must have Local Group Management Logs (Event ID 4732)",
         "test": "| metasearch earliest=-30d latest=now index=* sourcetype=\"WinEventLog:Security\" TERM(eventcode=4732) | head | stats count ",
         "resolution": "Turn on Group Management Audit Logs in your Local Windows Security Policy (<a href=\"http://whatevernetworks.com/?p=21\">docs</a>)",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },
    "Processes With Lookalike Filenames - Demo": {
      "value": "| inputlookup generic_sysmon_process_launch_logs.csv | rex field=Image \"(?<filename>[^\\\\\\\\/]*$)\" | stats values(host) as hosts dc(host) as num_hosts values(Image) as Images by filename | eval levenshtein_scores=\"\" | eval comparisonterm=\"svchost.exe\"  | lookup ut_levenshtein_lookup word1 as filename, word2 as comparisonterm | eval levenshtein_scores=mvappend(levenshtein_scores, ut_levenshtein) | eval score{ut_levenshtein} = comparisonterm | eval comparisonterm=\"iexplore.exe\" | lookup ut_levenshtein_lookup word1 as filename, word2 as comparisonterm | eval levenshtein_scores=mvappend(levenshtein_scores, ut_levenshtein) | eval score{ut_levenshtein} = comparisonterm | eval comparisonterm=\"ipconfig.exe\" | lookup ut_levenshtein_lookup word1 as filename, word2 as comparisonterm | eval levenshtein_scores=mvappend(levenshtein_scores, ut_levenshtein) | eval score{ut_levenshtein} = comparisonterm | eval comparisonterm=\"explorer.exe\" | lookup ut_levenshtein_lookup word1 as filename, word2 as comparisonterm | eval levenshtein_scores=mvappend(levenshtein_scores, ut_levenshtein)  | eval score{ut_levenshtein} = comparisonterm | eventstats max(num_hosts) as max_num_hosts | where isnull(mvfilter(levenshtein_scores=\"0\")) AND min(levenshtein_scores) <3 | eval lowest_levenshtein_score=min(levenshtein_scores) | eval suspect_files = \"\" | foreach score* [eval temp = \"<<FIELD>>\" | rex field=temp \"(?<num>\\d*)$\" | eval suspect_files=if(num<3,mvappend('<<FIELD>>', suspect_files),suspect_files) | fields - temp \"<<FIELD>>\"] | eval percentage_of_hosts_affected = round(100*num_hosts/max_num_hosts,2)| fields filename lowest_levenshtein_score suspect_files Images hosts num_hosts percentage_of_hosts_affected",
      "label": "Processes With Lookalike Filenames - Demo",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Demo Lookup",
         "test": "| rest splunk_server=local /servicesNS/-/-/data//lookup-table-files | eval blah=1, row=\"row\"| xyseries row title blah ",
         "resolution": "Verify that lookups installed with Splunk Security Essentials is present",
          "field": "generic_sysmon_service_launch_logs.csv",
          "greaterorequalto": 1},
        {"name": "Must have URL Toolbox Installed (provides Levenshtein lookalike detection)",
         "test": "| rest /services/apps/local | search disabled=0 label=\"URL Toolbox\" | stats count",
         "resolution": "The URL Toolbox app, written by Cedric Le Roux, not only provides effective URL Parsing but also Levenshtein similarity checking (e.g., typo detection) and Shannon entropy detection (random characters). Download <a href=\"https://splunkbase.splunk.com/app/2734/\">here</a>.",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },
    "Processes With Lookalike Filenames - Live": {
      "value": "index=* sourcetype=\"WinEventLog:Security\" EventCode=4688  | rex field=Image \"(?<filename>[^\\\\\\\\/]*$)\" | stats values(host) as hosts dc(host) as num_hosts values(Image) as Images by filename | eval levenshtein_scores=\"\" | eval comparisonterm=\"svchost.exe\"  | lookup ut_levenshtein_lookup word1 as filename, word2 as comparisonterm | eval levenshtein_scores=mvappend(levenshtein_scores, ut_levenshtein) | eval score{ut_levenshtein} = comparisonterm | eval comparisonterm=\"iexplore.exe\" | lookup ut_levenshtein_lookup word1 as filename, word2 as comparisonterm | eval levenshtein_scores=mvappend(levenshtein_scores, ut_levenshtein) | eval score{ut_levenshtein} = comparisonterm | eval comparisonterm=\"ipconfig.exe\" | lookup ut_levenshtein_lookup word1 as filename, word2 as comparisonterm | eval levenshtein_scores=mvappend(levenshtein_scores, ut_levenshtein) | eval score{ut_levenshtein} = comparisonterm | eval comparisonterm=\"explorer.exe\" | lookup ut_levenshtein_lookup word1 as filename, word2 as comparisonterm | eval levenshtein_scores=mvappend(levenshtein_scores, ut_levenshtein)  | eval score{ut_levenshtein} = comparisonterm | eventstats max(num_hosts) as max_num_hosts | where isnull(mvfilter(levenshtein_scores=\"0\")) AND min(levenshtein_scores) <3 | eval lowest_levenshtein_score=min(levenshtein_scores) | eval suspect_files = \"\" | foreach score* [eval temp = \"<<FIELD>>\" | rex field=temp \"(?<num>\\d*)$\" | eval suspect_files=if(num<3,mvappend('<<FIELD>>', suspect_files),suspect_files) | fields - temp \"<<FIELD>>\"] | eval percentage_of_hosts_affected = round(100*num_hosts/max_num_hosts,2)| fields filename lowest_levenshtein_score suspect_files Images hosts num_hosts percentage_of_hosts_affected",
      "label": "Processes With Lookalike Filenames - Live",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Windows Security Logs",
         "test": "| metasearch index=* earliest=-2h latest=now sourcetype=Win*Security | stats count ",
         "resolution": "Begin ingesting Windows Security Logs",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Must have Process Launch Logs (Event ID 4688)",
         "test": "earliest=-2h latest=now index=* sourcetype=Win*Security EventCode=4688 | head 100 | stats count ",
         "resolution": "Turn on Process Tracking in your Windows Audit logs (<a href=\"https://technet.microsoft.com/en-us/library/cc976411.aspx\">docs</a>)",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Must have URL Toolbox Installed (provides Levenshtein lookalike detection)",
         "test": "| rest /services/apps/local | search disabled=0 label=\"URL Toolbox\" | stats count",
         "resolution": "The URL Toolbox app, written by Cedric Le Roux, not only provides effective URL Parsing but also Levenshtein similarity checking (e.g., typo detection) and Shannon entropy detection (random characters). Download <a href=\"https://splunkbase.splunk.com/app/2734/\">here</a>.",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },
    "Emails With Lookalike Domains - Demo": {
      "value": "| inputlookup Anonymized_Email_Logs.csv \n| stats count by Sender \n| rex field=Sender \"\\@(?<domain_detected>.*)\" \n| stats sum(count) as count by domain_detected \n| eval domain_detected=mvfilter(domain_detected!=\"mycompany.com\" AND domain_detected!=\"company.com\" AND domain_detected!=\"mycompanylovestheenvironment.com\") \n| eval list=\"mozilla\" \n| `ut_parse_extended(domain_detected, list)` \n| foreach ut_subdomain_level* [eval orig_domain=domain_detected, domain_detected=mvappend(domain_detected, '<<FIELD>>' . \".\" . ut_tld)] \n| fields orig_domain domain_detected ut_domain count   \n| eval word1=mvappend(domain_detected, ut_domain), word2 = mvappend(\"mycompany.com\", \"company.com\", \"mycompanylovestheenvironment.com\") \n| lookup ut_levenshtein_lookup word1 word2 \n| eval ut_levenshtein= min(ut_levenshtein) \n| where ut_levenshtein < 3 \n| fields - domain_detected ut_domain \n| rename orig_domain as top_level_domain_in_incoming_email word1 as domain_names_analyzed word2 as company_domains_used count as num_occurrences ut_levenshtein as Levenshtein_Similarity_Score",
      "label": "Emails With Lookalike Domains - Demo",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Demo Lookup",
         "test": "| rest splunk_server=local /servicesNS/-/-/data//lookup-table-files | eval blah=1, row=\"row\"| xyseries row title blah ",
         "resolution": "Verify that lookups installed with Splunk Security Essentials is present",
          "field": "Anonymized_Email_Logs.csv",
          "greaterorequalto": 1},
        {"name": "Must have URL Toolbox Installed (provides Levenshtein lookalike detection and domain parsing)",
         "test": "| rest /services/apps/local | search disabled=0 label=\"URL Toolbox\" | stats count",
         "resolution": "The URL Toolbox app, written by Cedric Le Roux, not only provides effective URL Parsing but also Levenshtein similarity checking (e.g., typo detection) and Shannon entropy detection (random characters). Download <a href=\"https://splunkbase.splunk.com/app/2734/\">here</a>.",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },
    "Emails With Lookalike Domains - Live": {
      "value": "index=* sourcetype=cisco:esa* OR sourcetype=MSExchange*:MessageTracking OR tag==email src_user=*\n| stats count by src_user \n| rex field=src_user \"\\@(?<domain_detected>.*)\" \n| stats sum(count) as count by domain_detected \n| eval domain_detected=mvfilter(domain_detected!=\"mycompany.com\" AND domain_detected!=\"company.com\" AND domain_detected!=\"mycompanylovestheenvironment.com\") \n| eval list=\"mozilla\" \n| `ut_parse_extended(domain_detected, list)` \n| foreach ut_subdomain_level* [eval orig_domain=domain_detected, domain_detected=mvappend(domain_detected, '<<FIELD>>' . \".\" . ut_tld)] \n| fields orig_domain domain_detected ut_domain count   \n| eval word1=mvappend(domain_detected, ut_domain), word2 = mvappend(\"mycompany.com\", \"company.com\", \"mycompanylovestheenvironment.com\") \n| lookup ut_levenshtein_lookup word1 word2 \n| eval ut_levenshtein= min(ut_levenshtein) \n| where ut_levenshtein < 3 \n| fields - domain_detected ut_domain \n| rename orig_domain as top_level_domain_in_incoming_email word1 as domain_names_analyzed word2 as company_domains_used count as num_occurrences ut_levenshtein as Levenshtein_Similarity_Score",
      "label": "Emails With Lookalike Domains - Live",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have Email Data",
         "test": "| tstats count where index=* sourcetype=cisco:esa* OR sourcetype=MSExchange*:MessageTracking OR tag==email earliest=-4h",
         "resolution": "This search requires Email data. The out of the box field extractions support the Common Information Model, including Cisco ESA/Ironport and Microsoft Exchange. If you don't have this data today, we highly recommend ingesting it with the <a href=\"https://splunkbase.splunk.com/app/1761/\">Cisco ESA TA</a> or the <a href=\"https://splunkbase.splunk.com/app/3225/\">Splunk Add-on for Microsoft Exchange</a>. For best performance, accelerate the email data model from the <a href=\"https://splunkbase.splunk.com/app/1621/\">Common Information Model</a>!",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Must have URL Toolbox Installed (provides Levenshtein lookalike detection)",
         "test": "| rest /services/apps/local | search disabled=0 label=\"URL Toolbox\" | stats count",
         "resolution": "The URL Toolbox app, written by Cedric Le Roux, not only provides effective URL Parsing but also Levenshtein similarity checking (e.g., typo detection) and Shannon entropy detection (random characters). Download <a href=\"https://splunkbase.splunk.com/app/2734/\">here</a>.",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },
    "Emails With Lookalike Domains - Accelerated": {
      "value": "| tstats summaries_only=t allow_old_summaries=t count from datamodel=Email by All_Email.src_user \n| rename All_Email.src_user as src_user \n| rex field=src_user \"\\@(?<domain_detected>.*)\" \n| stats sum(count) as count by domain_detected \n| eval domain_detected=mvfilter(domain_detected!=\"mycompany.com\" AND domain_detected!=\"company.com\" AND domain_detected!=\"mycompanylovestheenvironment.com\") \n| eval list=\"mozilla\" \n| `ut_parse_extended(domain_detected, list)` \n| foreach ut_subdomain_level* [eval orig_domain=domain_detected, domain_detected=mvappend(domain_detected, '<<FIELD>>' . \".\" . ut_tld)] \n| fields orig_domain domain_detected ut_domain count   \n| eval word1=mvappend(domain_detected, ut_domain), word2 = mvappend(\"mycompany.com\", \"company.com\", \"mycompanylovestheenvironment.com\") \n| lookup ut_levenshtein_lookup word1 word2 \n| eval ut_levenshtein= min(ut_levenshtein) \n| where ut_levenshtein < 3 \n| fields - domain_detected ut_domain \n| rename orig_domain as top_level_domain_in_incoming_email word1 as domain_names_analyzed word2 as company_domains_used count as num_occurrences ut_levenshtein as Levenshtein_Similarity_Score",
      "label": "Emails With Lookalike Domains - Accelerated",
      "actions_UBASeverity": 7,
      "prereqs": [
        {"name": "Must have URL Toolbox Installed (provides Levenshtein lookalike detection)",
         "test": "| rest /services/apps/local | search disabled=0 label=\"URL Toolbox\" | stats count",
         "resolution": "The URL Toolbox app, written by Cedric Le Roux, not only provides effective URL Parsing but also Levenshtein similarity checking (e.g., typo detection) and Shannon entropy detection (random characters). Download <a href=\"https://splunkbase.splunk.com/app/2734/\">here</a>.",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Must have an Email data model",
         "test": "| tstats summaries_only=f allow_old_summaries=t count from datamodel=Email where earliest=-1h",
         "resolution": "This search requires an Email data. This is dependent on the <a href=\"https://splunkbase.splunk.com/app/1621/\">Common Information Model</a> being present, and also having your data mapped to CIM via appropriate TAs, usually with the out of the box field extractions from the <a href=\"https://splunkbase.splunk.com/app/1761/\">Cisco ESA TA</a>, the <a href=\"https://splunkbase.splunk.com/app/3225/\">Splunk Add-on for Microsoft Exchange</a>, etc.",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Must have an accelerated Email data model",
         "test": "| tstats summaries_only=t allow_old_summaries=t count from datamodel=Email where earliest=-1h",
         "resolution": "This search requires an accelerated Email data. In order to run a fast accelerated search, you should accelerate your data model. (<a href=\"https://docs.splunk.com/Documentation/Splunk/latest/HadoopAnalytics/Configuredatamodelacceleration#Accelerate_the_data_model\">docs</a>)",
          "field": "count",
          "greaterorequalto": 1},
        {"name": "Must have Sender Email Addresses (src_user) in your accelerated Email data model",
         "test": "| tstats summaries_only=t allow_old_summaries=t dc(All_Email.src_user) as count from datamodel=Email where earliest=-1h",
         "resolution": "This search assumes that you have actual source email addresses -- check your field extractions for src_user and then rebuild your data models if not.",
          "field": "count",
          "greaterorequalto": 1}
      ]
    },
    "Hosts That Stop Reporting Sourcetypes - Live": {
      "value": "| tstats prestats=t count(host) where index=* groupby host _time span=1d | tstats prestats=t append=t count where index=* sourcetype=win*security by host  _time span=1d | stats count(host) as all_logs count as win_logs by host _time | eval win_perc=round(100*(win_logs / all_logs), 2) | eventstats max(_time) as maxtime | stats count as num_data_samples avg(eval(if(_time<relative_time(maxtime, \"-1d@d\"), win_perc, null))) as avg sum(eval(if(_time<relative_time(maxtime, \"-1d@d\") AND win_perc=0, 1, null))) as past_instances_of_no_logs max(eval(if(_time>=relative_time(maxtime, \"-1d@d\"), win_perc, null))) as latest by host | where isnotnull(avg) AND num_data_samples>10 AND isnull(past_instances_of_no_logs) AND latest=0",
      "label": "Hosts That Stop Reporting Sourcetypes - Live",
      "actions_UBASeverity": 7
    }
}

